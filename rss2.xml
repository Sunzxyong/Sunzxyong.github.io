<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>zhengxiaoyong</title>
    <link>http://zhengxiaoyong.me/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Sun, 20 Nov 2016 13:09:10 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>简述RTMPDump与编译移植</title>
      <link>http://zhengxiaoyong.me/2016/11/20/%E7%AE%80%E8%BF%B0RTMPDump%E4%B8%8E%E7%BC%96%E8%AF%91%E7%A7%BB%E6%A4%8D/</link>
      <guid>http://zhengxiaoyong.me/2016/11/20/%E7%AE%80%E8%BF%B0RTMPDump%E4%B8%8E%E7%BC%96%E8%AF%91%E7%A7%BB%E6%A4%8D/</guid>
      <pubDate>Sun, 20 Nov 2016 11:47:59 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;RTMPDump概述&quot;&gt;&lt;a href=&quot;#RTMPDump概述&quot; class=&quot;headerlink&quot; title=&quot;RTMPDump概述&quot;&gt;&lt;/a&gt;&lt;strong&gt;RTMPDump概述&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://rtmpdump.mplayerhq.hu/&quot;&gt;RTMPDump主页&lt;/a&gt;，RTMPDump库主要包含三部分：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1、一个基本的客户端程序&lt;br&gt;2、两个服务器程序（rtmpsrv、rtmpsuck）&lt;br&gt;3、一个支持rtmp协议的库—librtmp&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下载RTMPDump最新源码，可以通过git拉取master分支上的最新代码：&lt;/p&gt;
&lt;figure class=&quot;highlight crmsh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git &lt;span class=&quot;keyword&quot;&gt;clone&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;git&lt;/span&gt;://git.ffmpeg.org/rtmpdump&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;或者下载以前版本的代码—&lt;a href=&quot;http://rtmpdump.mplayerhq.hu/download/&quot;&gt;Download old version&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下面主要介绍librtmp和librtmp的编译&lt;/p&gt;
&lt;h3 id=&quot;librtmp概述&quot;&gt;&lt;a href=&quot;#librtmp概述&quot; class=&quot;headerlink&quot; title=&quot;librtmp概述&quot;&gt;&lt;/a&gt;&lt;strong&gt;librtmp概述&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;librtmp库提供了大量客户端函数和少部分的服务器端的函数用来支持RTMP、RTMPT（RTMP使用Http通道），RTMPE（加密的RTMP），RTMPS（基于SSL/TLS的RTMP）和RTMPTE、RTMPTS（使用Http通道的加密和基于SSL/TLS的RTMP）协议&lt;/p&gt;
&lt;p&gt;使用librtmp库进行的流媒体交互都是使用&lt;strong&gt;FLV&lt;/strong&gt;封包格式进行传输的，当然编码不限定，不过为了拉流端同时也支持&lt;strong&gt;HLS&lt;/strong&gt;协议，最好使用&lt;strong&gt;H264&lt;/strong&gt;编码视频和&lt;strong&gt;AAC&lt;/strong&gt;编码音频数据&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="RTMPDump概述"><a href="#RTMPDump概述" class="headerlink" title="RTMPDump概述"></a><strong>RTMPDump概述</strong></h2><p><a href="http://rtmpdump.mplayerhq.hu/" target="_blank" rel="external">RTMPDump主页</a>，RTMPDump库主要包含三部分：</p>
<blockquote>
<p>1、一个基本的客户端程序<br>2、两个服务器程序（rtmpsrv、rtmpsuck）<br>3、一个支持rtmp协议的库—librtmp</p>
</blockquote>
<p>下载RTMPDump最新源码，可以通过git拉取master分支上的最新代码：</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">git</span>://git.ffmpeg.org/rtmpdump</span><br></pre></td></tr></table></figure>
<p>或者下载以前版本的代码—<a href="http://rtmpdump.mplayerhq.hu/download/" target="_blank" rel="external">Download old version</a></p>
<p>下面主要介绍librtmp和librtmp的编译</p>
<h3 id="librtmp概述"><a href="#librtmp概述" class="headerlink" title="librtmp概述"></a><strong>librtmp概述</strong></h3><p>librtmp库提供了大量客户端函数和少部分的服务器端的函数用来支持RTMP、RTMPT（RTMP使用Http通道），RTMPE（加密的RTMP），RTMPS（基于SSL/TLS的RTMP）和RTMPTE、RTMPTS（使用Http通道的加密和基于SSL/TLS的RTMP）协议</p>
<p>使用librtmp库进行的流媒体交互都是使用<strong>FLV</strong>封包格式进行传输的，当然编码不限定，不过为了拉流端同时也支持<strong>HLS</strong>协议，最好使用<strong>H264</strong>编码视频和<strong>AAC</strong>编码音频数据</p>
<a id="more"></a>
<p>使用librtmp通过<strong><code>RTMP[T][E|S]</code></strong>协议进行一次流媒体交互的基本过程为：</p>
<blockquote>
<p><strong>推流端</strong>：</p>
<ol>
<li><strong>RTMP_Alloc()</strong>-创建一个RTMP会话句柄</li>
<li><strong>RTMP_Init()</strong>-初始化RTMP句柄</li>
<li><strong>RTMP_SetupURL()</strong>-设置推流RTMP Url</li>
<li><strong>RTMP_EnableWrite()</strong>-配置该媒体流可进行写操作</li>
<li><strong>RTMP_Connect()</strong>-建立RTMP网络连接</li>
<li><strong>RTMP_ConnectStream()</strong>-建立RTMP流连接</li>
<li><strong>RTMP_Write()</strong>-对该媒体流进行写入流媒体信息</li>
<li><strong>RTMP_Close()</strong>-关闭RTMP连接</li>
<li><strong>RTMP_Free()</strong>-释放此次连接的会话句柄</li>
</ol>
</blockquote>
<hr>
<blockquote>
<p><strong>播放端</strong>：</p>
<ol>
<li><strong>RTMP_Alloc()</strong>-创建一个RTMP会话句柄</li>
<li><strong>RTMP_Init()</strong>-初始化RTMP句柄</li>
<li><strong>RTMP_SetupURL()</strong>-设置拉流RTMP Url</li>
<li><strong>RTMP_Connect()</strong>-建立RTMP网络连接</li>
<li><strong>RTMP_ConnectStream()</strong>-建立RTMP流连接</li>
<li><strong>RTMP_Read()</strong>-读取媒体流数据，返回0时则媒体流读取完毕</li>
<li><strong>RTMP_Pause()</strong>-暂停读取媒体流数据或取消暂停（options）</li>
<li><strong>RTMP_Seek()</strong>-可通过它改变流播放的位置（options）</li>
<li><strong>RTMP_Close()</strong>-当媒体流读取完毕后进行RTMP连接的关闭</li>
<li><strong>RTMP_Free()</strong>-释放此次连接的会话句柄</li>
</ol>
</blockquote>
<p>上述方法的具体实现可以在librtmp包中的<code>rtmp.c</code>文件中找到，同时，它还提供了其它众多方法来处理RTMP的流媒体交互过程</p>
<h3 id="librtmp的RTMP-URL格式"><a href="#librtmp的RTMP-URL格式" class="headerlink" title="librtmp的RTMP URL格式"></a><strong>librtmp的RTMP URL格式</strong></h3><p>一个基本的RTMP URL格式为：</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rtmp[<span class="link_label">t</span>][<span class="link_reference">e|s</span>]://host[<span class="link_label">:port</span>][<span class="link_reference">/app[/playpath</span>]]</span><br></pre></td></tr></table></figure>
<p>和http类似，不过某些地方不一样，下面简单说说：<br>scheme为rtmp或者rtmp协议的诸多变种之一，这就不需要多解释了，像websocket协议scheme为ws或者wss，http协议scheme为http或https。<br>host为主机名，后面紧接着为端口号，如果不指定，rtmp协议默认端口号为1935.<br>app代表服务器上的一个Application应用程序，这个名称是由服务器定义的，如：live。<br>playpath则是表示该Application下的一个媒体流的路径，如：room100。</p>
<p>当然也可以追加额外的参数，只不过这和我们使用http协议追加参数的方式不同，librtmp是采取空格为分隔符，通过追加”key=value”的方式进行追加额外的参数，如：</p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"rtmp://localhost:1935/live/room100 app=happylive"</span></span><br></pre></td></tr></table></figure>
<p>这就追加了额外的key为app，value为happylive的参数，表示使用happylive应用来连接而代替rtmp url中的live应用</p>
<p>关于librtmp的更多额外的参数配置，可以看<a href="http://rtmpdump.mplayerhq.hu/librtmp.3.html" target="_blank" rel="external">librtmp文档</a></p>
<h3 id="librtmp编译"><a href="#librtmp编译" class="headerlink" title="librtmp编译"></a><strong>librtmp编译</strong></h3><p>由于librtmp默认依赖zlib和openssl这两个库，所以编译时需要链接这两个库，由于NDK自带了zlib库，所以不需要单独去下载和编译，在编译librtmp时配置<code>Android.mk</code>文件的<code>LOCAL_LDLIBS</code>属性为<code>-lz</code>链接即可，编译时会在指定的platforms的arch-xxx/usr/lib/目录下搜索</p>
<p>编译librtmp，在librtmp目录下新建Android.mk文件，内容如下：</p>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_PATH:= $(call my-dir)</span><br><span class="line">include $(CLEAR_VARS)</span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># 编译模块输出的名称</span></span><br><span class="line">LOCAL_MODULE := rtmp</span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># 编译所需的头文件路径</span></span><br><span class="line">LOCAL_C_INCLUDES += \</span><br><span class="line">$(LOCAL_PATH)/</span><br><span class="line"><span class="preprocessor">#$(LOCAL_PATH)/../openssl/include/ #链接openssl库</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># 编译所需的源文件路径</span></span><br><span class="line">LOCAL_SRC_FILES := \</span><br><span class="line">amf.c       \</span><br><span class="line">log.c       \</span><br><span class="line">parseurl.c  \</span><br><span class="line">rtmp.c      \</span><br><span class="line">hashswf.c</span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># 编译时候需要链接的动态库库存在静态库形式，将会链接到对应的静态库而不是动态库</span></span><br><span class="line"><span class="preprocessor"># LOCAL_FORCE_STATIC_EXECUTABLE := true</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># 添加编译配置选项，一些常用编译配置：</span></span><br><span class="line"><span class="preprocessor"># -fPIC:编译位置无关的代码，一般用于编译动态库</span></span><br><span class="line"><span class="preprocessor"># -02:编译优化程度</span></span><br><span class="line"><span class="preprocessor"># -lxxx:链接名为libxxx库</span></span><br><span class="line"><span class="preprocessor"># -I添加编译器搜索-l指定的库文件的搜索</span></span><br><span class="line"><span class="preprocessor"># -D:加入宏定义，如：NO_CRYPTO，不使用加密</span></span><br><span class="line">LOCAL_CFLAGS += -DRTMPDUMP_VERSION=v2<span class="number">.4</span> -DNO_CRYPTO -Wall -fPIC -O2 </span><br><span class="line"><span class="preprocessor">#LOCAL_CFLAGS += -I$(LOCAL_PATH)/../openssl -lssl -lcrypto #可选添加openssl支持，需去除-DNO_CRYPTO</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># 添加编译时需要链接器链接的那些存在于NDK目录下的其它库，所链接库的以“-lxxx”格式命名，如：-lz 表示编译时会加载libz.so库</span></span><br><span class="line">LOCAL_LDLIBS += -lz</span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># include $(BUILD_STATIC_LIBRARY)</span></span><br><span class="line">include $(BUILD_SHARED_LIBRARY)</span><br></pre></td></tr></table></figure>
<p>关于mk文件的编写和参数配置，可以阅读<a href="https://developer.android.com/ndk/guides/android_mk.html" target="_blank" rel="external">mk官网文档</a>，上面也给出了全部编译时参数配置的注释，由于上面配置加入了<code>NO_CRYPTO</code>定义，没有链接openssl库，需要的可以自己加或者使用<a href="https://tls.mbed.org/" target="_blank" rel="external">PolarSSL</a>、<a href="http://www.gnu.org/software/gnutls/" target="_blank" rel="external">GnuTLS</a>来替代<a href="https://www.openssl.org/" target="_blank" rel="external">OpenSSL</a></p>
<p>然后在rtmpdump目录下也建立个Android.mk文件，内容为：</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="constant">LOCAL_PATH</span> := <span class="variable">$(</span>call my-dir)</span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(</span><span class="constant">CLEAR_VARS</span>)</span><br><span class="line">subdirs := <span class="variable">$(</span>addprefix <span class="variable">$(</span><span class="constant">LOCAL_PATH</span>)/,<span class="variable">$(</span>addsuffix /<span class="constant">Android</span>.mk, \</span><br><span class="line">librtmp \</span><br><span class="line">))</span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(</span>subdirs)</span><br></pre></td></tr></table></figure>
<p>其实不需要这个也行，不过加入该文件目的是为了能够统一rtmpdump文件夹下和子目录中的mk的编译运行入口，这样只需调用这一个mk文件即可，上面配置的只会运行librtmp目录下的mk文件，如果需要加入其它的，则在<code>subdirs</code>中加入即可，如：</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">subdirs </span>:= $(<span class="keyword">addprefix </span>$(LOCAL_PATH)/,$(<span class="keyword">addsuffix </span>/<span class="keyword">Android.mk, </span>\</span><br><span class="line"><span class="label">librtmp</span> \</span><br><span class="line"><span class="label">otherdir</span> \</span><br><span class="line">))</span><br></pre></td></tr></table></figure>
<p>最后在rtmpdump中新建jni目录，新建Application.mk文件，内容为：</p>
<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="constant">NDK_TOOLCHAIN_VERSION</span> := 4.9</span><br><span class="line"><span class="constant">APP_PLATFORM</span> := android-14</span><br><span class="line"><span class="constant">APP_ABI</span> := all</span><br><span class="line"><span class="constant">APP_OPTIM</span> := release</span><br><span class="line"><span class="constant">APP_PROJECT_PATH</span> := <span class="variable">$(shell pwd)</span></span><br><span class="line"><span class="constant">APP_BUILD_SCRIPT</span> := <span class="variable">$(APP_PROJECT_PATH)</span>/Android.mk</span><br></pre></td></tr></table></figure>
<p>主要是对编译时的编译配置进行配置，<code>APP_ABI := all</code>表示支持当前平台支持的的全部CPU架构</p>
<p>然后新建一个开始执行编译的脚本文件，内容为：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span></span><br><span class="line">NDK=<span class="variable">$HOME</span>/Library/Android/sdk/ndk-bundle</span><br><span class="line"><span class="variable">$NDK</span>/ndk-build NDK_APPLICATION_MK=./jni/Application.mk NDK_PROJECT_PATH=./</span><br></pre></td></tr></table></figure>
<p>其中NDK路径替换为自己的即可，开始编译：</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> rtmpdump</span><br><span class="line">./build_librtmp.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure>
<p>成功后，可以在rtmpdump目录下看到obj和libs两个文件夹，libs存放着编译出来的动态库，而obj则是存放静态库，这取决于所配置的是<code>BUILD_SHARED_LIBRARY</code>还是<code>BUILD_STATIC_LIBRARY</code></p>
<p>当然其它库也可以用这种方式进行编译</p>
<h2 id="在FFmpeg中使用librtmp"><a href="#在FFmpeg中使用librtmp" class="headerlink" title="在FFmpeg中使用librtmp"></a><strong>在FFmpeg中使用librtmp</strong></h2><p>由于FFmpeg本身默认自带就支持rtmp、rtmpt协议，不过也可以扩展以便支持rtmp协议的多种变种协议（rtmps、rtmpt、rtmpts、rtmpte和rtmpe协议），在FFmpeg加入openssl库的支持，可以支持rtmps、rtmpts协议，加入libgcrypt库的支持，可以支持rtmpe、rtmpte协议，这样支持相对麻烦，可以直接使用librtmp来支持rtmp以及它的多种变种协议，可通过链接librtmp库来支持，在FFmpeg的编译脚本中加入以下配置：</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">--enable-librtmp</span><br><span class="line">--extra-cflags=-I/<span class="variable">$LIBRTMP</span>_INCLUDE_PATH</span><br><span class="line">--extra-ldflags=-L/<span class="variable">$LIBRTMP</span>_LIB_PATH</span><br></pre></td></tr></table></figure>
<p>上面的<code>$LIBRTMP_INCLUDE_PATH</code>和<code>$LIBRTMP_LIB_PATH</code>分别是librtmp头文件和静态库的路径<br>关于FFmpeg如何链接第三方库请看我的这篇文章<a href="http://zhengxiaoyong.me/2016/11/13/%E5%88%9D%E8%AF%86FFmpeg%E7%BC%96%E8%AF%91%E9%82%A3%E4%BA%9B%E4%BA%8B/">初识FFmpeg编译那些事</a></p>
<p>如果在编译时发生错误或警告<code>xxx-pkg-config not found</code>，请找到FFmpeg的configure文件中的如下内容</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">enabled librtmp           &amp;&amp; require_pkg_config librtmp librtmp/rtmp<span class="class">.h</span> RTMP_Socket</span><br></pre></td></tr></table></figure>
<p>将后面的<code>&amp;&amp; require_pkg_config librtmp librtmp/rtmp.h RTMP_Socket</code>删了，因为FFmpeg在链接librtmp时会运行pkg-config，此时找不到pkg-config则会报错，当然还有链接其它库时如果发生类似错误也可以用同样的方法解决</p>
<h2 id="Librtmp编译源码"><a href="#Librtmp编译源码" class="headerlink" title="Librtmp编译源码"></a><strong>Librtmp编译源码</strong></h2><p><a href="https://github.com/Sunzxyong/Librtmp-Compile-For-Android" target="_blank" rel="external">librtmp编译源码</a></p>
]]></content:encoded>
      
      <comments>http://zhengxiaoyong.me/2016/11/20/%E7%AE%80%E8%BF%B0RTMPDump%E4%B8%8E%E7%BC%96%E8%AF%91%E7%A7%BB%E6%A4%8D/#disqus_thread</comments>
    </item>
    
    <item>
      <title>初识FFmpeg编译那些事</title>
      <link>http://zhengxiaoyong.me/2016/11/13/%E5%88%9D%E8%AF%86FFmpeg%E7%BC%96%E8%AF%91%E9%82%A3%E4%BA%9B%E4%BA%8B/</link>
      <guid>http://zhengxiaoyong.me/2016/11/13/%E5%88%9D%E8%AF%86FFmpeg%E7%BC%96%E8%AF%91%E9%82%A3%E4%BA%9B%E4%BA%8B/</guid>
      <pubDate>Sun, 13 Nov 2016 12:45:10 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;FFmpeg简介&quot;&gt;&lt;a href=&quot;#FFmpeg简介&quot; class=&quot;headerlink&quot; title=&quot;FFmpeg简介&quot;&gt;&lt;/a&gt;&lt;strong&gt;FFmpeg简介&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;FFMPEG是一套具有非常强大功能的多媒体处理工具，它几乎涵盖了目前所有主流的多媒体数据封装格式、多媒体传输协议以及音视频编解码器，并且支持多媒体后处理，视频色彩转换、滤镜和缩放等，也支持众多主流的协议：HTTP、RTP、RTSP、RTMP、HLS、UDP等&lt;br&gt;安装可以通过Homebrew&lt;/p&gt;
&lt;p&gt;FFmpeg它主要含有以下几个核心库：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1、libavcodec-提供了更加全面的编解码实现的合集&lt;br&gt;2、libavformat-提供了更加全面的音视频容器格式的封装和解析以及所支持的协议&lt;br&gt;3、libavutil-提供了一些公共函数&lt;br&gt;4、libavfilter-提供音视频的过滤器，如视频加水印、音频变声等&lt;br&gt;5、libavdevice-提供支持众多设备数据的输入与输出，如读取摄像头数据、屏幕录制&lt;br&gt;6、libswresample,libavresample-提供音频的重采样工具&lt;br&gt;7、libswscale-提供对视频图像进行色彩转换、缩放以及像素格式转换，如图像的YUV转换&lt;br&gt;8、libpostproc-多媒体后处理器&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以及包含以下几个工具：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1、ffmpeg-一个流媒体的编解码、格式转换以及多媒体流的内容处理工具&lt;br&gt;2、ffplay-一个使用FFmpeg编解码的播放器&lt;br&gt;3、ffprobe-一个多媒体分析工具&lt;br&gt;4、ffserver-一个流多媒体服务器&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="FFmpeg简介"><a href="#FFmpeg简介" class="headerlink" title="FFmpeg简介"></a><strong>FFmpeg简介</strong></h2><p>FFMPEG是一套具有非常强大功能的多媒体处理工具，它几乎涵盖了目前所有主流的多媒体数据封装格式、多媒体传输协议以及音视频编解码器，并且支持多媒体后处理，视频色彩转换、滤镜和缩放等，也支持众多主流的协议：HTTP、RTP、RTSP、RTMP、HLS、UDP等<br>安装可以通过Homebrew</p>
<p>FFmpeg它主要含有以下几个核心库：</p>
<blockquote>
<p>1、libavcodec-提供了更加全面的编解码实现的合集<br>2、libavformat-提供了更加全面的音视频容器格式的封装和解析以及所支持的协议<br>3、libavutil-提供了一些公共函数<br>4、libavfilter-提供音视频的过滤器，如视频加水印、音频变声等<br>5、libavdevice-提供支持众多设备数据的输入与输出，如读取摄像头数据、屏幕录制<br>6、libswresample,libavresample-提供音频的重采样工具<br>7、libswscale-提供对视频图像进行色彩转换、缩放以及像素格式转换，如图像的YUV转换<br>8、libpostproc-多媒体后处理器</p>
</blockquote>
<p>以及包含以下几个工具：</p>
<blockquote>
<p>1、ffmpeg-一个流媒体的编解码、格式转换以及多媒体流的内容处理工具<br>2、ffplay-一个使用FFmpeg编解码的播放器<br>3、ffprobe-一个多媒体分析工具<br>4、ffserver-一个流多媒体服务器</p>
</blockquote>
<a id="more"></a>
<h2 id="FFmpeg命令"><a href="#FFmpeg命令" class="headerlink" title="FFmpeg命令"></a><strong>FFmpeg命令</strong></h2><p>一些命令：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取帮助</span></span><br><span class="line">ffmpeg -help</span><br><span class="line"><span class="comment">//支持的格式</span></span><br><span class="line">ffmpeg -formats</span><br><span class="line"><span class="comment">//支持的解码</span></span><br><span class="line">ffmpeg -decoders</span><br><span class="line"><span class="comment">//支持的编码</span></span><br><span class="line">ffmpeg -encoders</span><br><span class="line"><span class="comment">//支持的协议</span></span><br><span class="line">ffmpeg -protocols</span><br><span class="line"><span class="comment">//本地视频文件推流至指定rtmp流媒体服务器</span></span><br><span class="line">ffmpeg -re -<span class="tag">i</span> movie<span class="class">.mp4</span> -c copy -f flv rtmp:<span class="comment">//localhost:1935/live/room</span></span><br><span class="line"><span class="comment">//媒体流保存为视频文件</span></span><br><span class="line">ffmpeg -<span class="tag">i</span> rtmp:<span class="comment">//localhost:1935/live/room -c copy moive.flv</span></span><br></pre></td></tr></table></figure>
<p>更多命令请看文档<a href="http://ffmpeg.org/documentation.html" target="_blank" rel="external">FFmpeg文档</a></p>
<h2 id="FFmpeg编译"><a href="#FFmpeg编译" class="headerlink" title="FFmpeg编译"></a><strong>FFmpeg编译</strong></h2><p>首先在官网下载<a href="http://ffmpeg.org/" target="_blank" rel="external">FFmpeg</a></p>
<p>在root dir编辑configure文件，把以下内容</p>
<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="constant">SLIBNAME_WITH_MAJOR</span>='<span class="variable">$(SLIBNAME)</span>.<span class="variable">$(LIBMAJOR)</span>'</span><br><span class="line"><span class="constant">LIB_INSTALL_EXTRA_CMD</span>='$<span class="variable">$(RANLIB)</span> "<span class="variable">$(LIBDIR)</span>/<span class="variable">$(LIBNAME)</span>"'</span><br><span class="line"><span class="constant">SLIB_INSTALL_NAME</span>='<span class="variable">$(SLIBNAME_WITH_VERSION)</span>'</span><br><span class="line"><span class="constant">SLIB_INSTALL_LINKS</span>='<span class="variable">$(SLIBNAME_WITH_MAJOR)</span> <span class="variable">$(SLIBNAME)</span>'</span><br></pre></td></tr></table></figure>
<p>替换成：</p>
<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="constant">SLIBNAME_WITH_MAJOR</span>='<span class="variable">$(SLIBPREF)</span><span class="variable">$(FULLNAME)</span>-<span class="variable">$(LIBMAJOR)</span><span class="variable">$(SLIBSUF)</span>'</span><br><span class="line"><span class="constant">LIB_INSTALL_EXTRA_CMD</span>='$<span class="variable">$(RANLIB)</span> "<span class="variable">$(LIBDIR)</span>/<span class="variable">$(LIBNAME)</span>"'</span><br><span class="line"><span class="constant">SLIB_INSTALL_NAME</span>='<span class="variable">$(SLIBNAME_WITH_MAJOR)</span>'</span><br><span class="line"><span class="constant">SLIB_INSTALL_LINKS</span>='<span class="variable">$(SLIBNAME)</span>'</span><br></pre></td></tr></table></figure>
<p>目的是修改so的文件名，为了编译出来的so能够被android平台正常使用，否则将编译出<code>libavcodec.so.57.64.100</code>这种类型的so，替换后将编译成我们能正常使用的<code>libavcodec-57.so</code>动态链接库，后面的数字为版本号</p>
<p>一般对于so，我们只需兼容arm cpu架构的即可，在root dir下新建bash脚本文件，内容为：</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">NDK=$HOME/Library/Android/sdk/ndk-bundle</span><br><span class="line">SYSROOT=$NDK/platforms/android-14/arch-arm/</span><br><span class="line">TOOLCHAIN=$NDK/toolchains/arm-linux-androideabi-4.9/prebuilt/darwin-x86_64</span><br><span class="line"></span><br><span class="line">CPU=arm</span><br><span class="line">PREFIX=$(pwd)/android/$CPU</span><br><span class="line">ADDI_CFLAGS=""</span><br><span class="line">ADDI_LDFLAGS=""</span><br><span class="line"></span><br><span class="line">function build_arm</span><br><span class="line">&#123;</span><br><span class="line">./configure \</span><br><span class="line">    -<span class="ruby">-prefix=<span class="variable">$PREFIX</span> \</span><br><span class="line"></span>    -<span class="ruby">-enable-shared \</span><br><span class="line"></span>    -<span class="ruby">-disable-static \</span><br><span class="line"></span>    -<span class="ruby">-disable-doc \</span><br><span class="line"></span>    -<span class="ruby">-disable-ffmpeg \</span><br><span class="line"></span>    -<span class="ruby">-disable-ffplay \</span><br><span class="line"></span>    -<span class="ruby">-disable-ffprobe \</span><br><span class="line"></span>    -<span class="ruby">-disable-ffserver \</span><br><span class="line"></span>    -<span class="ruby">-disable-symver \</span><br><span class="line"></span>    -<span class="ruby">-enable-avresample \</span><br><span class="line"></span>    -<span class="ruby">-enable-small \</span><br><span class="line"></span>    -<span class="ruby">-cross-prefix=<span class="variable">$TOOLCHAIN</span>/bin/arm-linux-androideabi- \</span><br><span class="line"></span>    -<span class="ruby">-target-os=linux \</span><br><span class="line"></span>    -<span class="ruby">-arch=arm \</span><br><span class="line"></span>    -<span class="ruby">-enable-cross-compile \</span><br><span class="line"></span>    -<span class="ruby">-sysroot=<span class="variable">$SYSROOT</span> \</span><br><span class="line"></span>    -<span class="ruby">-extra-cflags=<span class="string">"-Os -fpic $ADDI_CFLAGS"</span> \</span><br><span class="line"></span>    -<span class="ruby">-extra-ldflags=<span class="string">"$ADDI_LDFLAGS"</span> \</span><br><span class="line"></span>    $ADDITIONAL_CONFIGURE_FLAG</span><br><span class="line">make clean</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">build_arm</span><br></pre></td></tr></table></figure>
<p>NDK目录改为自己的NDK目录即可，关于configure配置，可以根据自己需要进行配置，可配置的属性在FFmpeg root dir的configure文件中show_help方法中查看，我摘一段：</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Program options:</span><br><span class="line">-<span class="ruby">-disable-programs       <span class="keyword">do</span> <span class="keyword">not</span> build command line programs</span><br><span class="line"></span>-<span class="ruby">-disable-ffmpeg         disable ffmpeg build</span><br><span class="line"></span>-<span class="ruby">-disable-ffplay         disable ffplay build</span><br><span class="line"></span>-<span class="ruby">-disable-ffprobe        disable ffprobe build</span><br><span class="line"></span>-<span class="ruby">-disable-ffserver       disable ffserver build</span></span><br></pre></td></tr></table></figure>
<p><code>--disable-ffmpeg</code>意为禁用ffmpeg工具，编译时不编译出ffmpeg工具，<code>--enable-ffmpeg</code>为启用，但是configure文件配置有个特点，FFmpeg的默认的配置不是以show_help方法中的配置配置的，而是以前缀<code>disable</code>or<code>enable</code>取反配置的，也就是FFmpeg中各属性默认的配置把show_help中各个配置的前缀取反即可，<code>disable</code>变为<code>enable</code>，<code>enable</code>变为<code>disable</code>，如：在上面那段配置中，<code>--disable-ffmpeg</code>意为启用ffmpeg工具。</p>
<p>但是我们编译的bash脚本中却不是这样，而是配置的实意配置，<code>disable</code>就是<code>disable</code>。</p>
<p>运行上面的bash脚本：</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> ffmpeg-3.2</span><br><span class="line">./build_ffmpeg_arm.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure>
<p>编译完成后可以发现在FFmpeg的root目录下多了一个android目录，该目录就是所生成对应cup架构的so目录<br><img src="http://7xswxf.com2.z0.glb.qiniucdn.com/2016-11-11-14788686122391.jpg" alt=""></p>
<hr>
<p>按以上配置的bash脚本，会发现<code>libavcodec-57.so</code>比较大，有7.6M，肯定不能在Android中使用，所以，在编译时，我们可以针对自己需要的功能来进行配置，更改bash脚本，加入配置：</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--disable-everything</span></span><br></pre></td></tr></table></figure>
<p>该属性会把下列所有的组件都不加入编译：</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">Individual component options:</span><br><span class="line">-<span class="ruby">-disable-everything     disable all components listed below</span><br><span class="line"></span>-<span class="ruby">-disable-encoder=<span class="constant">NAME</span>   disable encoder <span class="constant">NAME</span></span><br><span class="line"></span>-<span class="ruby">-enable-encoder=<span class="constant">NAME</span>    enable encoder <span class="constant">NAME</span></span><br><span class="line"></span>-<span class="ruby">-disable-encoders       disable all encoders</span><br><span class="line"></span>-<span class="ruby">-disable-decoder=<span class="constant">NAME</span>   disable decoder <span class="constant">NAME</span></span><br><span class="line"></span>-<span class="ruby">-enable-decoder=<span class="constant">NAME</span>    enable decoder <span class="constant">NAME</span></span><br><span class="line"></span>-<span class="ruby">-disable-decoders       disable all decoders</span><br><span class="line"></span>-<span class="ruby">-disable-hwaccel=<span class="constant">NAME</span>   disable hwaccel <span class="constant">NAME</span></span><br><span class="line"></span>-<span class="ruby">-enable-hwaccel=<span class="constant">NAME</span>    enable hwaccel <span class="constant">NAME</span></span><br><span class="line"></span>-<span class="ruby">-disable-hwaccels       disable all hwaccels</span><br><span class="line"></span>-<span class="ruby">-disable-muxer=<span class="constant">NAME</span>     disable muxer <span class="constant">NAME</span></span><br><span class="line"></span>-<span class="ruby">-enable-muxer=<span class="constant">NAME</span>      enable muxer <span class="constant">NAME</span></span><br><span class="line"></span>-<span class="ruby">-disable-muxers         disable all muxers</span><br><span class="line"></span>-<span class="ruby">-disable-demuxer=<span class="constant">NAME</span>   disable demuxer <span class="constant">NAME</span></span><br><span class="line"></span>-<span class="ruby">-enable-demuxer=<span class="constant">NAME</span>    enable demuxer <span class="constant">NAME</span></span><br><span class="line"></span>-<span class="ruby">-disable-demuxers       disable all demuxers</span><br><span class="line"></span>-<span class="ruby">-enable-parser=<span class="constant">NAME</span>     enable parser <span class="constant">NAME</span></span><br><span class="line"></span>-<span class="ruby">-disable-parser=<span class="constant">NAME</span>    disable parser <span class="constant">NAME</span></span><br><span class="line"></span>-<span class="ruby">-disable-parsers        disable all parsers</span><br><span class="line"></span>-<span class="ruby">-enable-bsf=<span class="constant">NAME</span>        enable bitstream filter <span class="constant">NAME</span></span><br><span class="line"></span>-<span class="ruby">-disable-bsf=<span class="constant">NAME</span>       disable bitstream filter <span class="constant">NAME</span></span><br><span class="line"></span>-<span class="ruby">-disable-bsfs           disable all bitstream filters</span><br><span class="line"></span>-<span class="ruby">-enable-protocol=<span class="constant">NAME</span>   enable protocol <span class="constant">NAME</span></span><br><span class="line"></span>-<span class="ruby">-disable-protocol=<span class="constant">NAME</span>  disable protocol <span class="constant">NAME</span></span><br><span class="line"></span>-<span class="ruby">-disable-protocols      disable all protocols</span><br><span class="line"></span>-<span class="ruby">-enable-indev=<span class="constant">NAME</span>      enable input device <span class="constant">NAME</span></span><br><span class="line"></span>-<span class="ruby">-disable-indev=<span class="constant">NAME</span>     disable input device <span class="constant">NAME</span></span><br><span class="line"></span>-<span class="ruby">-disable-indevs         disable input devices</span><br><span class="line"></span>-<span class="ruby">-enable-outdev=<span class="constant">NAME</span>     enable output device <span class="constant">NAME</span></span><br><span class="line"></span>-<span class="ruby">-disable-outdev=<span class="constant">NAME</span>    disable output device <span class="constant">NAME</span></span><br><span class="line"></span>-<span class="ruby">-disable-outdevs        disable output devices</span><br><span class="line"></span>-<span class="ruby">-disable-devices        disable all devices</span><br><span class="line"></span>-<span class="ruby">-enable-filter=<span class="constant">NAME</span>     enable filter <span class="constant">NAME</span></span><br><span class="line"></span>-<span class="ruby">-disable-filter=<span class="constant">NAME</span>    disable filter <span class="constant">NAME</span></span><br><span class="line"></span>-<span class="ruby">-disable-filters        disable all filters</span></span><br></pre></td></tr></table></figure>
<p>而我们生成的<code>libavcodec-57.so</code>过大也是由于加入了过多我们不需要使用的组件，禁用了所有的，接下来就是把自己需要的加入到bash脚本中配置即可，比如加入下面两个配置确保h264和aac的解码功能的保留：</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby">-enable-decoder=h264</span><br><span class="line"></span>-<span class="ruby">-enable-decoder=aac</span></span><br></pre></td></tr></table></figure>
<p>等等，当然还有其它的，可以参考上面禁用的配置进行选择性保留。</p>
<h2 id="编译支持H-264编码的FFmpeg动态链接库"><a href="#编译支持H-264编码的FFmpeg动态链接库" class="headerlink" title="编译支持H.264编码的FFmpeg动态链接库"></a><strong>编译支持H.264编码的FFmpeg动态链接库</strong></h2><h3 id="x264"><a href="#x264" class="headerlink" title="x264"></a><strong>x264</strong></h3><p>首先下载<a href="http://www.videolan.org/developers/x264.html" target="_blank" rel="external">x264源码</a><br>x264是一个开源的H.264编码器，据说是最好的视频有损编码器，和编译FFmpeg类似，要编译x264成动态so库，一样通过configure配置文件，需要先修改configure文件中的：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="string">"SOSUFFIX=so"</span> <span class="prompt">&gt;&gt; </span>config.mak</span><br><span class="line">echo <span class="string">"SONAME=libx264.so.$API"</span> <span class="prompt">&gt;&gt; </span>config.mak</span><br><span class="line">echo <span class="string">"SOFLAGS=-shared -Wl,-soname,\$(SONAME) $SOFLAGS"</span> <span class="prompt">&gt;&gt; </span>config.mak</span><br></pre></td></tr></table></figure>
<p>替换成：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="string">"SOSUFFIX=so"</span> <span class="prompt">&gt;&gt; </span>config.mak</span><br><span class="line">echo <span class="string">"SONAME=libx264-$API.so"</span> <span class="prompt">&gt;&gt; </span>config.mak</span><br><span class="line">echo <span class="string">"SOFLAGS=-shared -Wl,-soname,\$(SONAME) $SOFLAGS"</span> <span class="prompt">&gt;&gt; </span>config.mak</span><br></pre></td></tr></table></figure>
<p>目的一样，确保可以在Android平台下可用，然后使用下面的bash脚本进行编译，arm为例：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span><br><span class="line"></span></span><br><span class="line">NDK=<span class="variable">$HOME</span>/Library/Android/sdk/ndk-bundle</span><br><span class="line">SYSROOT=<span class="variable">$NDK</span>/platforms/android-<span class="number">14</span>/arch-arm/</span><br><span class="line">TOOLCHAIN=<span class="variable">$NDK</span>/toolchains/arm-linux-androideabi-<span class="number">4.9</span>/prebuilt/darwin-x86_64</span><br><span class="line"></span><br><span class="line">CPU=arm</span><br><span class="line">PREFIX=$(<span class="built_in">pwd</span>)/android/<span class="variable">$CPU</span></span><br><span class="line">ADDI_CFLAGS=<span class="string">""</span></span><br><span class="line">ADDI_LDFLAGS=<span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> build_arm</span><br><span class="line">&#123;</span><br><span class="line">./configure \</span><br><span class="line">    --prefix=<span class="variable">$PREFIX</span> \</span><br><span class="line">    --enable-shared \</span><br><span class="line">    --disable-asm \</span><br><span class="line">    --enable-pic \</span><br><span class="line">    --enable-strip \</span><br><span class="line">    --host=arm-linux-androideabi \</span><br><span class="line">    --cross-prefix=<span class="variable">$TOOLCHAIN</span>/bin/arm-linux-androideabi- \</span><br><span class="line">    --sysroot=<span class="variable">$SYSROOT</span></span><br><span class="line">    --extra-cflags=<span class="string">"-Os -fpic <span class="variable">$ADDI_CFLAGS</span>"</span> \</span><br><span class="line">    --extra-ldflags=<span class="string">"<span class="variable">$ADDI_LDFLAGS</span>"</span> \</span><br><span class="line">    <span class="variable">$ADDITIONAL_CONFIGURE_FLAG</span></span><br><span class="line">make clean</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">build_arm</span><br></pre></td></tr></table></figure>
<p>NDK目录同样改为自己的<br>运行上面脚本：</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> x264</span><br><span class="line">./build_x264_arm.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure>
<p>编译完成后可以android目录找到<code>libx264-148.so</code>库</p>
<h3 id="静态链接x264编译"><a href="#静态链接x264编译" class="headerlink" title="静态链接x264编译"></a><strong>静态链接x264编译</strong></h3><p>FFmpeg默认是不支持H.264的编码，不过支持H.264解码，但是FFmpeg为我们提供了众多配置，可添加额外功能库的支持，方便我们自己链接所需要额外功能的库，在FFmpeg的configure文件配置中，可以看到这么一段配置：</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">External library support:</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">-<span class="ruby">-enable-libfdk-aac      enable <span class="constant">AAC</span> de/encoding via libfdk-aac [no]</span><br><span class="line"></span>-<span class="ruby">-enable-libopenh264     enable <span class="constant">H</span>.<span class="number">264</span> encoding via <span class="constant">OpenH264</span> [no]</span><br><span class="line"></span>-<span class="ruby">-enable-libopenjpeg     enable <span class="constant">JPEG</span> <span class="number">2000</span> de/encoding via <span class="constant">OpenJPEG</span> [no]</span><br><span class="line"></span>-<span class="ruby">-enable-librtmp         enable <span class="constant">RTMP</span>[<span class="constant">E</span>] support via librtmp [no]</span><br><span class="line"></span>-<span class="ruby">-enable-libwebp         enable <span class="constant">WebP</span> encoding via libwebp [no]</span><br><span class="line"></span>-<span class="ruby">-enable-libx264         enable <span class="constant">H</span>.<span class="number">264</span> encoding via x264 [no]</span><br><span class="line"></span>-<span class="ruby">-enable-opengl          enable <span class="constant">OpenGL</span> rendering [no]</span><br><span class="line"></span>-<span class="ruby">-enable-openssl         enable openssl, needed <span class="keyword">for</span> https support</span><br><span class="line"></span>if gnutls is not used [no]</span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure>
<p>避免篇幅太长，做了一部分删减，留了一些比较眼熟的，FFmpeg可以让我们自己配置添加需要的功能库，如使用fdk-aac库来做aac的编解码，H.264编码可选x264或openh264以及可选其它功能库的支持</p>
<p>要编译支持x264编码的FFmpeg动态链接库，首先是编译出x264静态链接库<code>libx264.a</code>，然后修改FFmpeg的编译脚本，配置x264静态链接库和头文件路径，接下来即可编译了</p>
<h4 id="1、编译x264静态链接库"><a href="#1、编译x264静态链接库" class="headerlink" title="1、编译x264静态链接库"></a><strong>1、编译x264静态链接库</strong></h4><p>因为FFmpeg是使用静态链接方式链接其它额外的外部功能库，所以需要把x264库编译成<code>.a</code>静态库，通过<code>--enable-static</code>配置参数来编译出<code>.a</code>静态库，而<code>--enable-shared</code>则是编译动态链接so库，所以只需在上面的x264脚本中增加个配置：</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--enable-<span class="keyword">static</span></span><br></pre></td></tr></table></figure>
<p>编译成功后可以看到如下目录结构：<br><img src="http://7xswxf.com2.z0.glb.qiniucdn.com/2016-11-13-14789707702522.jpg" alt=""></p>
<h4 id="2、在FFmpeg脚本中配置x264静态链接库和头文件路径及编译"><a href="#2、在FFmpeg脚本中配置x264静态链接库和头文件路径及编译" class="headerlink" title="2、在FFmpeg脚本中配置x264静态链接库和头文件路径及编译"></a><strong>2、在FFmpeg脚本中配置x264静态链接库和头文件路径及编译</strong></h4><p>在此之前，先安装yasm：</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">brew </span>install yasm</span><br></pre></td></tr></table></figure>
<p>然后在之前FFmpeg的脚本基础上添加以下配置：</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby">-enable-gpl \</span><br><span class="line"></span>-<span class="ruby">-enable-libx264 \</span><br><span class="line"></span>-<span class="ruby">-enable-yasm \</span><br><span class="line"></span>-<span class="ruby">-extra-cflags=<span class="string">"-I../x264/android/arm/include"</span> \</span><br><span class="line"></span>-<span class="ruby">-extra-ldflags=<span class="string">"-L../x264/android/arm/lib"</span> \</span></span><br></pre></td></tr></table></figure>
<p>FFmpeg默认的LICENSE是LGPL，而libx264需要GPL，所以加入<code>--enable-gpl</code>，最后面两项配置是配置编译x264出的头文件和静态链接库路径，在这里我把x264和FFmpeg放在了同一目录层级，故可这样配置。<br>如果你需要修改<code>--extra-cflags</code>和<code>--extra-ldflags</code>路径为自己x264头文件和静态链接库路径，必须符合<code>--extra-cflags</code>以-I开头，<code>--extra-ldflags</code>以-L开头，这些参数含义为：</p>
<blockquote>
<p>-D：用于在编译时定义宏<br>-I：编译阶段生效的参数，用于指定头文件的搜索路径<br>-L：链接阶段生效的参数，用于指定链接库的搜索路径，-l用于指定链接库的名称，一般两者一起使用的话，就可以指定动态链接库</p>
</blockquote>
<p>比如x264在桌面上，路径为：</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby">-extra-cflags=<span class="string">"-I/Users/Sunzxyong/Desktop/x264/android/arm/include"</span> \</span><br><span class="line"></span>-<span class="ruby">-extra-ldflags=<span class="string">"-L/Users/Sunzxyong/Desktop/x264/android/arm/lib"</span> \</span></span><br></pre></td></tr></table></figure>
<p>然后进行编译，编译中可以看到encode的支持选择中，多了libx264的支持：<br><img src="http://7xswxf.com2.z0.glb.qiniucdn.com/2016-11-13-14790203252342.jpg" alt=""></p>
<p>其它外部添加库如fdk-aac、openh264等也类似方式链接编译</p>
<h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a><strong>Github</strong></h2><p><a href="https://github.com/Sunzxyong/FFmpeg-Compile-For-Android" target="_blank" rel="external">FFmpeg编译脚本</a></p>
]]></content:encoded>
      
      <comments>http://zhengxiaoyong.me/2016/11/13/%E5%88%9D%E8%AF%86FFmpeg%E7%BC%96%E8%AF%91%E9%82%A3%E4%BA%9B%E4%BA%8B/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Android运行时Crash自动恢复框架-Recovery</title>
      <link>http://zhengxiaoyong.me/2016/09/05/Android%E8%BF%90%E8%A1%8C%E6%97%B6Crash%E8%87%AA%E5%8A%A8%E6%81%A2%E5%A4%8D%E6%A1%86%E6%9E%B6-Recovery/</link>
      <guid>http://zhengxiaoyong.me/2016/09/05/Android%E8%BF%90%E8%A1%8C%E6%97%B6Crash%E8%87%AA%E5%8A%A8%E6%81%A2%E5%A4%8D%E6%A1%86%E6%9E%B6-Recovery/</guid>
      <pubDate>Mon, 05 Sep 2016 11:35:32 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;&lt;strong&gt;简介&lt;/strong&gt;&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;App Crash的恢复，这个想法很早之前就有，目前有些时间就实现了一把，主要是对App运行时发生Crash后，对Activity的堆栈和数据进行恢复，或者重启应用，或者重启并清空缓存，避免因本地的数据类型或格式错误而导致App在读取时一直Crash，Debug模式还包括Crash信息的显示和保存，便于在开发、测试时查看相应CrashInfo&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Crash的处理&quot;&gt;&lt;a href=&quot;#Crash的处理&quot; class=&quot;headerlink&quot; title=&quot;Crash的处理&quot;&gt;&lt;/a&gt;&lt;strong&gt;Crash的处理&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;对于应用的Crash，一般的做法我们往往都是实现个自定义&lt;code&gt;UncaughtExceptionHandler&lt;/code&gt;，而这个自定义的CustomUncaughtHandler我们一般都用于捕捉Crash信息进行上报和监控是否发生Crash，还有一个作用就是可以屏蔽系统默认的Crash对话框，也就是拦截Crash后不把系统默认的UncaughtHandler设置进去，而是直接进行KillProcess，这个过程就是屏蔽了系统的默认Crash处理流程，原因是系统的处理其中在AMS的crashApplication()中会执行这么一段代码：&lt;/p&gt;
&lt;figure class=&quot;highlight nimrod&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Message&lt;/span&gt; msg = &lt;span class=&quot;type&quot;&gt;Message&lt;/span&gt;.obtain();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;msg.what = &lt;span class=&quot;type&quot;&gt;SHOW_ERROR_MSG&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;HashMap&lt;/span&gt; data = new &lt;span class=&quot;type&quot;&gt;HashMap&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;data.put(&lt;span class=&quot;string&quot;&gt;&quot;result&quot;&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;result&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;data.put(&lt;span class=&quot;string&quot;&gt;&quot;app&quot;&lt;/span&gt;, r);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;msg.obj = data;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mUiHandler.sendMessage(msg);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;发送一个显示Dialog的消息，之后便创建一个AppErrorDialog进行显示。&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a><strong>简介</strong></h1><blockquote>
<p>App Crash的恢复，这个想法很早之前就有，目前有些时间就实现了一把，主要是对App运行时发生Crash后，对Activity的堆栈和数据进行恢复，或者重启应用，或者重启并清空缓存，避免因本地的数据类型或格式错误而导致App在读取时一直Crash，Debug模式还包括Crash信息的显示和保存，便于在开发、测试时查看相应CrashInfo</p>
</blockquote>
<h1 id="Crash的处理"><a href="#Crash的处理" class="headerlink" title="Crash的处理"></a><strong>Crash的处理</strong></h1><p>对于应用的Crash，一般的做法我们往往都是实现个自定义<code>UncaughtExceptionHandler</code>，而这个自定义的CustomUncaughtHandler我们一般都用于捕捉Crash信息进行上报和监控是否发生Crash，还有一个作用就是可以屏蔽系统默认的Crash对话框，也就是拦截Crash后不把系统默认的UncaughtHandler设置进去，而是直接进行KillProcess，这个过程就是屏蔽了系统的默认Crash处理流程，原因是系统的处理其中在AMS的crashApplication()中会执行这么一段代码：</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Message</span> msg = <span class="type">Message</span>.obtain();</span><br><span class="line">msg.what = <span class="type">SHOW_ERROR_MSG</span>;</span><br><span class="line"><span class="type">HashMap</span> data = new <span class="type">HashMap</span>();</span><br><span class="line">data.put(<span class="string">"result"</span>, <span class="literal">result</span>);</span><br><span class="line">data.put(<span class="string">"app"</span>, r);</span><br><span class="line">msg.obj = data;</span><br><span class="line">mUiHandler.sendMessage(msg);</span><br></pre></td></tr></table></figure>
<p>发送一个显示Dialog的消息，之后便创建一个AppErrorDialog进行显示。<br><a id="more"></a><br>当然还有另外一种屏蔽系统默认ErrorDialog的方法，就是对AMP进行Hook，拦截handleApplicationCrash()方法后进行KillProcess，这样的话永远都将不会出现系统默认对话框，即使把系统默认的设置进去了，这个方法建议App内对AMP进行了Hook的做，其它App反而只为实现这个小功能而进行Hook成本太高，还是用自定义的做法进行屏蔽。</p>
<h1 id="Recovery"><a href="#Recovery" class="headerlink" title="Recovery"></a><strong>Recovery</strong></h1><h2 id="Crash处理流程"><a href="#Crash处理流程" class="headerlink" title="Crash处理流程"></a><strong>Crash处理流程</strong></h2><p>对于Recovery，在应用发生Crash时，会进入一个Recovery界面，在该界面可以进行界面的恢复、应用的重启，或进入debug模式进行Crash信息的查看与保存</p>
<h2 id="接入"><a href="#接入" class="headerlink" title="接入"></a><strong>接入</strong></h2><h3 id="请戳这里"><a href="#请戳这里" class="headerlink" title="请戳这里"></a><a href="https://github.com/Sunzxyong/Recovery/blob/master/README.md" target="_blank" rel="external">请戳这里</a></h3><h2 id="RecoveryActivity"><a href="#RecoveryActivity" class="headerlink" title="RecoveryActivity"></a><strong>RecoveryActivity</strong></h2><p>在应用发生Crash后，将进入RecoveryActivity界面<br><img src="http://7xswxf.com2.z0.glb.qiniucdn.com/blog/Recovery.png" alt="Recovery"></p>
<h2 id="ActivityStack的恢复"><a href="#ActivityStack的恢复" class="headerlink" title="ActivityStack的恢复"></a><strong>ActivityStack的恢复</strong></h2><p>对于恢复界面，默认是恢复整个Activity的堆栈，以便保护用户之前的数据</p>
<p>当应用在前台时崩溃无非就三种：<br>1、界面一创建就崩溃，可能在onCreate等方法中读取数据造成的Crash<br>2、界面创建且绘制完成正常显示，在用户执行某个操作，如点击按钮执行某个操作等造成的Crash<br>3、其它异步线程、服务等在后台执行任务时导致的Crash</p>
<p>上面的情况都应恢复绘制完成后的界面，也就是栈顶Activity是在Crash之前用户所看到的界面，而之前创建且未销毁的Activity也应该进行恢复。</p>
<p>当应用在后台时：<br>1、进程未挂，无非就是异步线程、server等后台任务发生异常时导致的Crash<br>2、进程已挂，进程被360等工具杀死了，常见的是push过来了然后唤起App进程，在解析push信息时候导致Crash</p>
<p>上面的情况App在后台时导致的Crash，Recovery提供了一个参数（recoverInBackgroud），用来设置是否在后台Crash时进行恢复。</p>
<p>ActivityStack恢复的操作，都是先恢复栈中的Activity，无Activity时则重启应用</p>
<h2 id="主页的回退"><a href="#主页的回退" class="headerlink" title="主页的回退"></a><strong>主页的回退</strong></h2><p>在进行恢复Activity时，如果只是恢复栈顶Activity，当用户在这个界面不进行跳转操作而是直接按返回键，这将导致直接退出程序，所以对于这个情况应该是回退到应用的主页，Recovery中有个参数mainPage，如果设置了就表示需要回退到主页，没有设置则不进行回退</p>
<p>这个过程中涉及到获取App内Activity栈内的数量和栈底Activity，是开发人员应该都知道获取这两个信息是通过getRunningTasks来获取，不过可惜，在5.0以后Google对权限进行了收敛，目地是保护App的信息安全，这个方法在5.0以后将失效，所以需要另外一种方法进行兼容，于是乎看6.0源码又发现Google在5.0收敛了整个权限，导致本App的都获取不到，但是在6.0又放出来了，不过只能获取本应用的数据，所以兼容的策略是5.0~6.0自己维护一个ActivityStack</p>
<h2 id="连续Crash的处理"><a href="#连续Crash的处理" class="headerlink" title="连续Crash的处理"></a><strong>连续Crash的处理</strong></h2><p>如果一分钟内进行了两次恢复后还导致Crash，则不进行恢复而是重启应用，或者重启并清空缓存，以便恢复App刚安装时的状态</p>
<h2 id="静默恢复"><a href="#静默恢复" class="headerlink" title="静默恢复"></a><strong>静默恢复</strong></h2><p>对于应用运行时发生Crash后的恢复，默认是显示RecoveryActivity，也就是上图的界面来让用户选择是否需要进行恢复，同时也支持静默恢复，也就是不显示界面，在发生Crash后根据所配置参数自动的恢复（重启、恢复ActivityStack、恢复栈顶Activity、重启并清空缓存）</p>
<h2 id="无图言屌"><a href="#无图言屌" class="headerlink" title="无图言屌"></a><strong>无图言屌</strong></h2><p>下面是效果图：<br><img src="http://7xswxf.com2.z0.glb.qiniucdn.com/blog/recovery.gif" alt="Gif"></p>
<p>静默恢复的效果图：<br><img src="http://7xswxf.com2.z0.glb.qiniucdn.com/blog/recovery_silence.gif" alt="silence"></p>
<h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a><strong>项目地址</strong></h2><p>欢迎star或提建议</p>
<h3 id="还是戳我"><a href="#还是戳我" class="headerlink" title="还是戳我"></a><a href="https://github.com/Sunzxyong/Recovery" target="_blank" rel="external">还是戳我</a></h3>]]></content:encoded>
      
      <comments>http://zhengxiaoyong.me/2016/09/05/Android%E8%BF%90%E8%A1%8C%E6%97%B6Crash%E8%87%AA%E5%8A%A8%E6%81%A2%E5%A4%8D%E6%A1%86%E6%9E%B6-Recovery/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Android端应用秒开优化体验</title>
      <link>http://zhengxiaoyong.me/2016/07/18/Android%E7%AB%AF%E5%BA%94%E7%94%A8%E7%A7%92%E5%BC%80%E4%BC%98%E5%8C%96%E4%BD%93%E9%AA%8C/</link>
      <guid>http://zhengxiaoyong.me/2016/07/18/Android%E7%AB%AF%E5%BA%94%E7%94%A8%E7%A7%92%E5%BC%80%E4%BC%98%E5%8C%96%E4%BD%93%E9%AA%8C/</guid>
      <pubDate>Mon, 18 Jul 2016 13:43:26 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;最近部门内抛出了一个问题，应用启动很慢、卡图标？主要表现在中低端机型中。究其这个问题，由于对性能优化比较感兴趣，借了个低端机和一个中端机来一看究竟，对同一应用分别测了下它在中低端机的启动时间，下面为启动耗时情况：&lt;br&gt;&lt;img src=&quot;http://7xswxf.com2.z0.glb.qiniucdn.com/blog/launch_one.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;启动了三次，基本都在4s左右。&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h2><p>最近部门内抛出了一个问题，应用启动很慢、卡图标？主要表现在中低端机型中。究其这个问题，由于对性能优化比较感兴趣，借了个低端机和一个中端机来一看究竟，对同一应用分别测了下它在中低端机的启动时间，下面为启动耗时情况：<br><img src="http://7xswxf.com2.z0.glb.qiniucdn.com/blog/launch_one.jpg" alt=""></p>
<p>启动了三次，基本都在4s左右。<br><a id="more"></a></p>
<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a><strong>原因</strong></h2><p>究其原因，主要因素是任务在界面绘制前过于集中化。</p>
<p>应用启动过程从用户点击launcher图标到看到第一帧这个过程中，主要会经过以下这些过程：</p>
<blockquote>
<p>main()-&gt;Application:attachBaseContext()-&gt;onCreate()-&gt;Activity:onCreate()-&gt;onStart()-&gt;onPostCreate()-&gt;onResume()-&gt;onPostResume()</p>
</blockquote>
<p>而一般我们的初始化任务主要都会集中化在Application:onCreate()方法中，这就使得初始化任务在第一帧绘制之前得完成，这就造成了卡图标、应用启动慢。那么把任务打散呢？分散在LaunchActivity中去分段初始化？还是不行的，因为界面开始绘制是在onResume()方法开始后才开始绘制，所以，得从Activity的创建过程找办法。</p>
<p>main-&gt;Activity创建的这个过程会经过一系列framework层的操作，这些操作都是系统自动执行的，不易进行优化，不过可以在Activity创建这个过程前后来找一些蛛丝马迹，因为Activity的创建都会辗转到ActivityThread:performLaunchActivity()这个方法中，在这个方法中可以知道这么几件事：<br>1、先通过Instrumentation:newActivity()来创建一个Activity实例<br>2、再判断Application实例是否已创建，已创建则直接返回，否则调用<br>Instrumentation:newApplication()来创建Application实例，在这个过程中会依次执行attachBaseContext()和onCreate()方法<br>3、之后Activity:attach()方法会创建一个PhoneWindow对象，它就是界面，它有一个DecorView，调用setContentView()时会给配置DecorView，其中就会设置一个背景：<br><img src="http://7xswxf.com2.z0.glb.qiniucdn.com/blog/launc_code.jpg" alt=""></p>
<p>我们的View也是add进DecorView中显示，它作为RootView肯定是最先显示，所以可以给它设置个默认背景<br>4、最后依次调用Activity的onCreate、onStart等方法</p>
<h2 id="措施"><a href="#措施" class="headerlink" title="措施"></a><strong>措施</strong></h2><blockquote>
<p>1、任务分级<br>2、任务并行<br>3、界面预显示</p>
</blockquote>
<p>对于任务集中初始化化、耗时初始化原因导致应用在中低端机启动过慢，而Activity界面绘制的时机导致简单的将任务分给Activity初始化也不起作用，我们必须找一个切入点</p>
<blockquote>
<p>界面的创建和界面的绘制，这两个过程第一个是Application的attachBaseConte和onCreate这两个方法影响的，第二个则是Application创建一直到界面绘制</p>
</blockquote>
<p>所以，可以对任务进行分级的临界点可以这样分：</p>
<blockquote>
<p>1、CoreSDK——Application的创建<br>2、HighPrioritySDK——Activity的创建<br>3、LowPrioritySDK——Activity界面完成绘制<br>4、AsyncSDK——Activity的创建</p>
</blockquote>
<p>如图：<br><img src="http://7xswxf.com2.z0.glb.qiniucdn.com/launch.png" alt="launch"></p>
<p>对任务这样分级后，测了一下，应用的启动即使在低端机上，也能秒开:<br><img src="http://7xswxf.com2.z0.glb.qiniucdn.com/blog/launch_two.jpg" alt=""></p>
<h2 id="分级带来的问题"><a href="#分级带来的问题" class="headerlink" title="分级带来的问题"></a><strong>分级带来的问题</strong></h2><p>正常启动过程那肯定是没问题的，不过有这么几种场景：</p>
<blockquote>
<p>1、App切回后台，内存不足导致Application被回收，从最近任务列表中恢复界面时Application需重新创建<br>2、应用没挂起时，Push推送需从Notification跳入应用内某界面<br>3、应用没挂起时，浏览器外链需跳入应用内某界面</p>
</blockquote>
<p>这些Case可能导致的问题是被跳入的界面使用到了未初始化的SDK，可能导致Crash或者数据异常，所以目标页面启动前必须确保SDK已经初始化，这个过程的原因是没有唤起启动页来初始化SDK，可以通过hook newActivity解决，其中判断Application是否初始化和各个SDK是否初始化，并且判断该次启动不来自系统的Launcher。</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function">Activity <span class="title">newActivity</span><span class="params">(ClassLoader cl, String className, Intent intent)</span> <span class="keyword">throws</span> InstantiationException, IllegalAccessException, ClassNotFoundException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (InitializeOptimizer.isApplicationCreated()</span><br><span class="line">            &amp;&amp; (!InitializeOptimizer.isHighSDKInitialized()</span><br><span class="line">            || !InitializeOptimizer.isLowSDKInitialized()</span><br><span class="line">            || !InitializeOptimizer.isAsyncSDKInitialized()) &amp;&amp; !InitializeUtil.isAppLauncher(intent)) &#123;</span><br><span class="line">        InitializeOptimizer.setApplicationCreated(<span class="keyword">false</span>);</span><br><span class="line">        intent.addCategory(InitializeUtil.INITIALIZE_CATEGORY);</span><br><span class="line">        <span class="keyword">return</span> (Activity) cl.loadClass(WDInitializeOptimizer.getLaunchClassName()).newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">    InitializeOptimizer.setApplicationCreated(<span class="keyword">false</span>);</span><br><span class="line">    <span class="function"><span class="keyword">return</span> <span class="keyword">super</span>.<span class="title">newActivity</span><span class="params">(cl, className, intent)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content:encoded>
      
      <comments>http://zhengxiaoyong.me/2016/07/18/Android%E7%AB%AF%E5%BA%94%E7%94%A8%E7%A7%92%E5%BC%80%E4%BC%98%E5%8C%96%E4%BD%93%E9%AA%8C/#disqus_thread</comments>
    </item>
    
    <item>
      <title>UrlRouter路由框架的设计</title>
      <link>http://zhengxiaoyong.me/2016/04/24/UrlRouter%E8%B7%AF%E7%94%B1%E6%A1%86%E6%9E%B6%E7%9A%84%E8%AE%BE%E8%AE%A1/</link>
      <guid>http://zhengxiaoyong.me/2016/04/24/UrlRouter%E8%B7%AF%E7%94%B1%E6%A1%86%E6%9E%B6%E7%9A%84%E8%AE%BE%E8%AE%A1/</guid>
      <pubDate>Sun, 24 Apr 2016 14:10:36 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;UrlRouter的设计&quot;&gt;&lt;a href=&quot;#UrlRouter的设计&quot; class=&quot;headerlink&quot; title=&quot;UrlRouter的设计&quot;&gt;&lt;/a&gt;&lt;strong&gt;UrlRouter的设计&lt;/strong&gt;&lt;/h2&gt;&lt;h3 id=&quot;目的&quot;&gt;&lt;a href=&quot;#目的&quot; class=&quot;headerlink&quot; title=&quot;目的&quot;&gt;&lt;/a&gt;&lt;strong&gt;目的&lt;/strong&gt;&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;1、可取代使用startActivity、startActivityForResult跳转的情景，便于协同开发&lt;br&gt;2、通过一串url可任意跳转到指定界面，使用应尽可能简单&lt;br&gt;3、支持各种类型参数传递、界面转场动画&lt;br&gt;4、可获取起跳界面的路径和当前界面路径，以便支持后期埋点等需求&lt;br&gt;5、支持从H5到Native，Native到H5，这是Hybrid开发模式中常用到的需求&lt;br&gt;6、对于push、浏览器外链跳转等可方便配置化，通过一个url来跳转指定界面&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="UrlRouter的设计"><a href="#UrlRouter的设计" class="headerlink" title="UrlRouter的设计"></a><strong>UrlRouter的设计</strong></h2><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a><strong>目的</strong></h3><blockquote>
<p>1、可取代使用startActivity、startActivityForResult跳转的情景，便于协同开发<br>2、通过一串url可任意跳转到指定界面，使用应尽可能简单<br>3、支持各种类型参数传递、界面转场动画<br>4、可获取起跳界面的路径和当前界面路径，以便支持后期埋点等需求<br>5、支持从H5到Native，Native到H5，这是Hybrid开发模式中常用到的需求<br>6、对于push、浏览器外链跳转等可方便配置化，通过一个url来跳转指定界面</p>
</blockquote>
<a id="more"></a>
<h3 id="url格式"><a href="#url格式" class="headerlink" title="url格式"></a><strong>url格式</strong></h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">scheme:</span><span class="comment">//host/path</span></span><br></pre></td></tr></table></figure>
<p>scheme：APP内自己定义的，不过这个在H5内跳Native时，需要和前端协商定义好，本地间的跳转可以随自己定义，比如：activity<br>host：这个尽可能按各个Activity的所在模块命名<br>path：各个Activity的功能名</p>
<p>这样一来，比如我跳转到商品详情页的url：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">activity:</span><span class="comment">//product/detail</span></span><br></pre></td></tr></table></figure>
<h3 id="匹配对应的Activity"><a href="#匹配对应的Activity" class="headerlink" title="匹配对应的Activity"></a><strong>匹配对应的Activity</strong></h3><p>刚刚我们定义好了跳转的url规则，那么就需要把这个规则配置给对应的Activity，对于规则的配置，要哪种方式好呢？目前网络上的路由框架大致都是通过注解或维护一套映射表来实现的，内部处理也比较麻烦。因此我们需要一套简单的方式来处理，在Android系统中，我们知道startActivity打开界面的原理是在manifest文件中对Intent进行匹配，如果找到了符合该Intent的Activity则打开，否则将报一个异常：<code>ActivityNotFoundException</code>，我想大部分同学在startActivity时可能没有注意到这个异常，因为以往我们都是通过显示的设置一个<code>Activity.class</code>字节码对象给Intent，这在manifest中自然会找到，如果我们设置一个不存在的包名或者类名，那么在跳转时就会抛出这个异常，所以一个良好的实践是在startActivity时判断该Intent是否已经正确匹配到目标Activity，匹配成功则跳转，失败则自己处理，代码如下：</p>
<figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> isIntentAvailable(Context context, Intent intent) &#123;</span><br><span class="line">    <span class="keyword">if</span> (context == <span class="keyword">null</span> || intent == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    PackageManager packageManager = context.getApplicationContext().getPackageManager();</span><br><span class="line">    <span class="keyword">List</span>&lt;ResolveInfo&gt; <span class="keyword">list</span> = packageManager.queryIntentActivities(intent,</span><br><span class="line">            PackageManager.MATCH_DEFAULT_ONLY);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">list</span>.size() &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>既然是通过在manifest中匹配Intent来跳转到指定界面，那么我们可以通过配置Activity的<code>intent-filter</code>规则来匹配，其中Action、Category、Data需要配置，而Action、Category我们可以固定为VIEW和DEFAULT，而Data则才是用来匹配目标Intent的，如下是匹配刚刚商品详情页的配置：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">activity</span> <span class="attribute">android:name</span>=<span class="value">".DetailActivity"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">action</span> <span class="attribute">android:name</span>=<span class="value">"android.intent.action.VIEW"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">category</span> <span class="attribute">android:name</span>=<span class="value">"android.intent.category.DEFAULT"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="title">data</span> <span class="attribute">android:scheme</span>=<span class="value">"activity"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">data</span> <span class="attribute">android:host</span>=<span class="value">"product"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">data</span> <span class="attribute">android:path</span>=<span class="value">"/detail"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">activity</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>假如这个界面也需要支持从H5界面唤起，那么在保持native的跳转功能之外，还可以把前端定义的规则一起加进来，比如前端定义的唤起商品详情页的url为：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">h5</span>:<span class="comment">//webview/goods_detail</span></span><br></pre></td></tr></table></figure>
<p>当然这是我乱写的，具体的应该定义的更有意义些，这里为了区分就随便定义了下，还有后面肯定是带了参数的，用来传递给打开的界面，为了简洁我给省略了。同时要支持上面这串url，我们只需在指定的Activity配置相应data即可：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">activity</span> <span class="attribute">android:name</span>=<span class="value">".DetailActivity"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">action</span> <span class="attribute">android:name</span>=<span class="value">"android.intent.action.VIEW"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">category</span> <span class="attribute">android:name</span>=<span class="value">"android.intent.category.DEFAULT"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="title">data</span> <span class="attribute">android:scheme</span>=<span class="value">"activity"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">data</span> <span class="attribute">android:host</span>=<span class="value">"product"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">data</span> <span class="attribute">android:path</span>=<span class="value">"/detail"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">data</span> <span class="attribute">android:scheme</span>=<span class="value">"h5"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">data</span> <span class="attribute">android:host</span>=<span class="value">"webview"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">data</span> <span class="attribute">android:path</span>=<span class="value">"/goods_detail"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">activity</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上面既然配置好了Activity，那么Intent就可以这样设置了：</p>
<figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Intent</span> <span class="type">intent</span> = new <span class="type">Intent</span>();</span><br><span class="line"><span class="type">intent</span>.setAction(<span class="type">Intent</span>.ACTION_VIEW);</span><br><span class="line"><span class="type">intent</span>.addCategory(<span class="type">Intent</span>.CATEGORY_DEFAULT);</span><br><span class="line"><span class="type">intent</span>.setData(Uri.parse(<span class="string">"activity://product/detail"</span>));</span><br></pre></td></tr></table></figure>
<p>不过还没设置目标Activity的信息，所以这就需要通过<code>packageManager.queryIntentActivities()</code>来查询是否正确匹配符合我们url规则的Activity，有则最终我们会得到一个<code>ResolveInfo</code>对象，通过该对象我们可以得到目标Activity的包名、类名等信息，所以再设置给Intent用来start</p>
<h3 id="参数应怎么传递"><a href="#参数应怎么传递" class="headerlink" title="参数应怎么传递"></a><strong>参数应怎么传递</strong></h3><p>对于参数传递，我相信在使用url的情况下，很容易想到在url后面拼接json、KV或者其它自定义的格式，这种方式在处理普通的int、布尔、字符串确实非常方便，不过在传递对象、List集合情况下就不好处理了，所以，基于这个，可以这样定义，在传递字符串、int、布尔类型时直接使用url拼接形式，涉及到其它复杂的数据类型时使用Bundle传递</p>
<h3 id="匹配到多个Activity的处理"><a href="#匹配到多个Activity的处理" class="headerlink" title="匹配到多个Activity的处理"></a><strong>匹配到多个Activity的处理</strong></h3><p>对于匹配过程中，可能存在一个Intent匹配到多个Activity，这时候就需要处理了，因为最终我们只需要打开一个Activity就行了，这时候千万别使用设置intent-filter的优先级来处理，也即：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">intent-filter</span> <span class="attribute">android:priority</span>=<span class="value">"10"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这种做法是错误的，因为这个优先级只对有序广播有效，其它情况下获取到的值都为0，所以正确的处理规则如下：<br>由于系统在匹配过程中，当匹配到多个时，会依匹配符合程度按循序排序好返回给我们，不过这时候难免会有第三方包的Activity，需优先匹配本应用包中的Activity，本包中没有再返回系统最匹配的，代码如下：</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ResolveInfo queryActivity(Context context, Intent intent) &#123;</span><br><span class="line">    <span class="keyword">if</span> (context == <span class="keyword">null</span> || intent == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    PackageManager packageManager = context.getApplicationContext().getPackageManager();</span><br><span class="line">    List&lt;ResolveInfo&gt; resolveInfoList = packageManager.queryIntentActivities(intent,</span><br><span class="line">            PackageManager.MATCH_DEFAULT_ONLY);</span><br><span class="line">    <span class="keyword">if</span> (resolveInfoList == <span class="keyword">null</span> || resolveInfoList.<span class="built_in">size</span>() == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    <span class="built_in">int</span> <span class="built_in">size</span> = resolveInfoList.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">size</span> == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> resolveInfoList.<span class="built_in">get</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">String</span> appPackageName = context.getApplicationContext().getPackageName();</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; i++) &#123;</span><br><span class="line">        ResolveInfo resolveInfo = resolveInfoList.<span class="built_in">get</span>(i);</span><br><span class="line">        <span class="keyword">String</span> activityName = resolveInfo.activityInfo.name;</span><br><span class="line">        <span class="keyword">if</span> (TextUtils.isEmpty(activityName))</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (activityName.startsWith(appPackageName)) &#123;</span><br><span class="line">            <span class="keyword">return</span> resolveInfo;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> resolveInfoList.<span class="built_in">get</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="外置浏览器跳App内页面的处理"><a href="#外置浏览器跳App内页面的处理" class="headerlink" title="外置浏览器跳App内页面的处理"></a><strong>外置浏览器跳App内页面的处理</strong></h3><p>要支持外置浏览器跳App页面，必须在manifest文件中给相应的Activity的<code>intent-filter</code>添加<code>&lt;category android:name=&quot;android.intent.category.BROWSABLE&quot;/&gt;</code> 属性，因为从浏览器中发起的intent的Category就是<code>android.intent.category.BROWSABLE</code>，所以要让App中相应的界面接收到浏览器的intent，则必须设置这个Category<br>下面这个filter就支持浏览器跳App内页面:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">intent-filter</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">action</span> <span class="attribute">android:name</span>=<span class="value">"android.intent.action.VIEW"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">category</span> <span class="attribute">android:name</span>=<span class="value">"android.intent.category.DEFAULT"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">category</span> <span class="attribute">android:name</span>=<span class="value">"android.intent.category.BROWSABLE"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">intent-filter</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="UrlRouter框架跳转方式"><a href="#UrlRouter框架跳转方式" class="headerlink" title="UrlRouter框架跳转方式"></a><strong>UrlRouter框架跳转方式</strong></h3><p>最终我们可以封成使用这样的方式来跳转的一个UrlRouter框架：</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UrlRouter.<span class="keyword">from</span>(<span class="keyword">this</span>).jump(<span class="string">"activity://native/login"</span>);</span><br></pre></td></tr></table></figure>
<p>当需设置其它params、requestCode、转场动画时，可以这样使用：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">UrlRouter.from(<span class="keyword">this</span>)</span><br><span class="line">        .params(bundle)</span><br><span class="line">        .requestCode(REQUEST_LOGIN)</span><br><span class="line">        .transitionAnim(<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">        .jump(<span class="string">"activity://native/login"</span>);</span><br></pre></td></tr></table></figure>
<p>对于需要跳转到主页时，应单独实现一个方法，因为主页的intent的action和category比较特殊，所以主页Activity应这样配置：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">activity</span></span><br><span class="line">    <span class="attribute">android:name</span>=<span class="value">".MainActivity"</span></span><br><span class="line">    <span class="attribute">android:label</span>=<span class="value">"@string/app_name"</span></span><br><span class="line">    <span class="attribute">android:theme</span>=<span class="value">"@style/AppTheme.NoActionBar"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">action</span> <span class="attribute">android:name</span>=<span class="value">"android.intent.action.MAIN"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="title">category</span> <span class="attribute">android:name</span>=<span class="value">"android.intent.category.LAUNCHER"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">category</span> <span class="attribute">android:name</span>=<span class="value">"android.intent.category.DEFAULT"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="title">data</span></span><br><span class="line">            <span class="attribute">android:host</span>=<span class="value">"native"</span></span><br><span class="line">            <span class="attribute">android:path</span>=<span class="value">"/main"</span></span><br><span class="line">            <span class="attribute">android:scheme</span>=<span class="value">"activity"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">activity</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>跳转代码为：</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UrlRouter.<span class="keyword">from</span>(<span class="keyword">this</span>).jumpToMain(<span class="string">"activity://native/main"</span>);</span><br></pre></td></tr></table></figure>
<p>这样的方式非常简洁，而且维护也非常方便，因为统一都是在manifest文件中配置，最重要的是没有其它UrlRouter框架那么复杂繁重，最终封的框架只有三个类，简洁精悍！！！</p>
<h2 id="UrlRouter地址"><a href="#UrlRouter地址" class="headerlink" title="UrlRouter地址"></a><strong>UrlRouter地址</strong></h2><p>UrlRouter：<a href="https://github.com/Sunzxyong/UrlRouter" target="_blank" rel="external">github</a></p>
]]></content:encoded>
      
      <comments>http://zhengxiaoyong.me/2016/04/24/UrlRouter%E8%B7%AF%E7%94%B1%E6%A1%86%E6%9E%B6%E7%9A%84%E8%AE%BE%E8%AE%A1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Native与H5交互的那些事</title>
      <link>http://zhengxiaoyong.me/2016/04/20/Native%E4%B8%8EH5%E4%BA%A4%E4%BA%92%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/</link>
      <guid>http://zhengxiaoyong.me/2016/04/20/Native%E4%B8%8EH5%E4%BA%A4%E4%BA%92%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/</guid>
      <pubDate>Wed, 20 Apr 2016 04:55:28 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;Hybrid开发模式目前几乎每家公司都有涉及和使用，这种开发模式兼具良好的Native用户交互体验的优势与WebApp跨平台的优势，而这种模式，在Android中必然需要WebView作为载体来展示H5内容和进行交互，而WebView的各种安全性、兼容性的问题，我想大多数人与它友谊的小床已经翻了，特别是4.2版本之前的addjavascriptInterface接口引起的漏洞，可能导致恶意网页通过Js方法遍历刚刚通过addjavascriptInterface注入进来的类的所有方法从中获取到getClass方法，然后通过反射获取到Runtime对象，进而调用Runtime对象的exec方法执行一些操作，恶意的Js代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;execute&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;cmdArgs&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&quot;getClass&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;[obj]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            alert(obj);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;  &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;[obj].getClass().forName(&lt;span class=&quot;string&quot;&gt;&quot;java.lang.Runtime&quot;&lt;/span&gt;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 .getMethod(&lt;span class=&quot;string&quot;&gt;&quot;getRuntime&quot;&lt;/span&gt;,&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;).invoke(&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;,&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;).exec(cmdArgs);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;为了避免这个漏洞，即需要限制Js代码能够调用到的Native方法，官方于是在从4.2开始的版本可以通过为可以被Js调用的方法添加&lt;code&gt;@JavascriptInterface&lt;/code&gt;注解来解决，而之前的版本虽然不能通过这种方法解决，但是可以使用Js的&lt;code&gt;prompt&lt;/code&gt;方法进行解决，只不过&lt;code&gt;需要和前端协商好一套公共的协议&lt;/code&gt;，除此之外，为了避免WebView加载任意url，也需要对url进行白名单检测，由于Android碎片化太严重，WebView也存在兼容性问题，WebView的内核也在4.4版本进行了改变，由webkit改为chromium，此外WebView还有一个非常明显的问题，就是内存泄露，根本原因就是Activity与WebView关联后，WebView内部的一些操作的执行在新线程中，这些时间无法确定，而可能导致WebView一直持有Activity的引用，不能回收。下面就谈谈怎样正确安全的让Native与H5交互&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h2><p>Hybrid开发模式目前几乎每家公司都有涉及和使用，这种开发模式兼具良好的Native用户交互体验的优势与WebApp跨平台的优势，而这种模式，在Android中必然需要WebView作为载体来展示H5内容和进行交互，而WebView的各种安全性、兼容性的问题，我想大多数人与它友谊的小床已经翻了，特别是4.2版本之前的addjavascriptInterface接口引起的漏洞，可能导致恶意网页通过Js方法遍历刚刚通过addjavascriptInterface注入进来的类的所有方法从中获取到getClass方法，然后通过反射获取到Runtime对象，进而调用Runtime对象的exec方法执行一些操作，恶意的Js代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">execute</span>(<span class="params">cmdArgs</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> obj <span class="keyword">in</span> <span class="built_in">window</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"getClass"</span> <span class="keyword">in</span> <span class="built_in">window</span>[obj]) &#123;</span><br><span class="line">            alert(obj);</span><br><span class="line">            <span class="keyword">return</span>  <span class="built_in">window</span>[obj].getClass().forName(<span class="string">"java.lang.Runtime"</span>)  </span><br><span class="line">                 .getMethod(<span class="string">"getRuntime"</span>,<span class="literal">null</span>).invoke(<span class="literal">null</span>,<span class="literal">null</span>).exec(cmdArgs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为了避免这个漏洞，即需要限制Js代码能够调用到的Native方法，官方于是在从4.2开始的版本可以通过为可以被Js调用的方法添加<code>@JavascriptInterface</code>注解来解决，而之前的版本虽然不能通过这种方法解决，但是可以使用Js的<code>prompt</code>方法进行解决，只不过<code>需要和前端协商好一套公共的协议</code>，除此之外，为了避免WebView加载任意url，也需要对url进行白名单检测，由于Android碎片化太严重，WebView也存在兼容性问题，WebView的内核也在4.4版本进行了改变，由webkit改为chromium，此外WebView还有一个非常明显的问题，就是内存泄露，根本原因就是Activity与WebView关联后，WebView内部的一些操作的执行在新线程中，这些时间无法确定，而可能导致WebView一直持有Activity的引用，不能回收。下面就谈谈怎样正确安全的让Native与H5交互<br><a id="more"></a></p>
<h2 id="Native与H5怎样安全的进行交互？"><a href="#Native与H5怎样安全的进行交互？" class="headerlink" title="Native与H5怎样安全的进行交互？"></a><strong>Native与H5怎样安全的进行交互？</strong></h2><p>要使得H5内的Js与Native之间安全的相互进行调用，我们除了可以通过添加<code>@JavascriptInterface</code>注解来解决（&gt;=4.2），还有通过<code>prompt</code>的方式，不过如果使用官方的方式，这就需要对4.2以下做兼容了，这样使得我们一个app中有两套Js与Native交互的方式，这样极其不好维护，我们应该只需要一套Js与Native交互的方式，所以，我们借助Js中的<code>prompt</code>方法来实现<code>一套安全的Js与Native交互的JsBridge框架</code></p>
<h3 id="Js与Native代码相互调用"><a href="#Js与Native代码相互调用" class="headerlink" title="Js与Native代码相互调用"></a><strong>Js与Native代码相互调用</strong></h3><p><strong>Native Invoke Js:</strong><br>我们知道如果Native需要调用Js中的方法，只需要使用<code>WebView:loadUrl();</code>方法即可直接调用指定Js代码，如：</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mWebView<span class="class">.loadUrl</span>("javascript<span class="value">:<span class="function">setUserName</span>(<span class="string">'zhengxiaoyong'</span>);</span>");</span><br></pre></td></tr></table></figure>
<p>这样就直接调用了Js中的<code>setUserName</code>方法并把<code>zhengxiaoyong</code>这个名字传到这个方法中去了，接下来就是Js自己处理了</p>
<p><strong>Js Invoke Native:</strong><br>而如果Js要调用Native中的Java方法呢？这就需要我们自己实现了，因为我们不采取<code>JavascriptInterface</code>的方式，而采取prompt方式<br>对WebView熟悉的同学们应该都知道Js中对应的<code>window.alert()</code>、<code>window.confirm()</code>、<code>window.prompt()</code>这三个方法的调用在<code>WebChromeClient</code>中都有对应的回调方法，分别为：<br><code>onJsAlert()</code>、<code>onJsConfirm()</code>、<code>onJsPrompt()</code>，对于它们传入的<code>message</code>，都可以在相应的回调方法中接收到，所以，对于Js调Native方法，我们可以借助这个信道，和前端协定好一段特定规则的<code>message</code>，这个规则中应至少包含这些信息：</p>
<blockquote>
<p>所调用Native方法所在类的类名<br>所调用Native的方法名<br>Js调用Native方法所传入的参数</p>
</blockquote>
<p>所以基于这些信息，很容易想到使用http协议的格式来协定规则，如下格式：</p>
<blockquote>
<p><strong>scheme://host:port/path?query</strong><br>对应的我们协定<code>prompt</code>传入<code>message</code>的格式为:<br><strong>jsbridge://class:port/method?params</strong></p>
</blockquote>
<p>这样以来，前端和app端协商好后，以后前端需要通过Js调用Native方法来获取一些信息或功能，就只需要按照协议的格式把需要调用的类名、方法名、参数放入对应得位置即可，而我们会在<code>onJsPrompt</code>方法中接受到，所以我们根据与前端协定好的协议来进行解析，我们可以用一个<code>Uri</code>来包装这段协议，然后通过<code>Uri:getHost、getPath、getQuery</code>方法获取对应的类名，方法名，参数数据，最后通过反射来调用指定类中指定的方法</p>
<p>而此时会有人问？<code>port</code>是用来干嘛的？params格式是KV还是什么格式？<br>当然，既然和前端协定好了协议的格式了，那么params肯定也是需要协定好的，可以用KV格式，也可以用一串Json字符串表示，为了解析方便，还是建议使用<code>Json格式</code><br>而<code>port</code>是用来干嘛的呢？</p>
<blockquote>
<p><code>port</code>我们并不会直接操作它，它是由Js代码自动生成的，port的作用是为了标识Js中的回调<code>function</code>,当Js调用Native方法时，我们会得到本次调用的<code>port</code>号，我们需要在Native方法执行完毕后再把该<code>port</code>、执行的后结果、是否调用成功、调用失败的msg等信息通过调用Js的<code>onComplete</code>方法传入，这时候Js凭什么知道你本次返回的信息是哪次调用的结果呢？就是通过<code>port</code>号，因为在Js调用Native方法时我们会把自动生成的<code>port</code>号和此次回调的<code>function</code>绑定在一起，这样以来Native方法返回结果时把<code>port</code>也带过来，就知道是哪次回调该用哪个<code>function</code>方法来处理</p>
</blockquote>
<p>自动生成<code>port</code>和绑定<code>function回调</code>的Js代码如下：</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">generatePort: function () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">Math</span>.floor(<span class="type">Math</span>.random() * (<span class="number">1</span> &lt;&lt; <span class="number">50</span>)) + '' + increase++;</span><br><span class="line">&#125;,</span><br><span class="line">//调用<span class="type">Native</span>方法</span><br><span class="line">callMethod: function (clazz, <span class="keyword">method</span>, param, callback) &#123;</span><br><span class="line">    <span class="keyword">var</span> port = <span class="type">PrivateMethod</span>.generatePort();</span><br><span class="line">    <span class="keyword">if</span> (typeof callback !== 'function') &#123;</span><br><span class="line">        callback = null;</span><br><span class="line">    &#125;</span><br><span class="line">    //绑定对应port的function回调函数</span><br><span class="line">    <span class="type">PrivateMethod</span>.registerCallback(port, callback);</span><br><span class="line">    <span class="type">PrivateMethod</span>.callNativeMethod(clazz, port, <span class="keyword">method</span>, param);</span><br><span class="line">&#125;,</span><br><span class="line">onComplete: function (port, <span class="literal">result</span>) &#123;</span><br><span class="line">    //把<span class="type">Native</span>返回的<span class="type">Json</span>字符串转为<span class="type">JSONObject</span></span><br><span class="line">    <span class="keyword">var</span> resultJson = <span class="type">PrivateMethod</span>.str2Json(<span class="literal">result</span>);</span><br><span class="line">    //获取对应port的function回调函数</span><br><span class="line">    <span class="keyword">var</span> callback = <span class="type">PrivateMethod</span>.getCallback(port).callback;</span><br><span class="line">    <span class="type">PrivateMethod</span>.unRegisterCallback(port);</span><br><span class="line">    <span class="keyword">if</span> (callback) &#123;</span><br><span class="line">        //执行回调</span><br><span class="line">        callback &amp;&amp; callback(resultJson);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Js代码上已经注释的很清楚了，就不多解释了。</p>
<p>经过上面介绍，那么在Native方法执行完成后，当然就需要把结果返回给Js了，那么结果的格式又是什么呢？返回给Js方法又是什么呢？<br>没错，还是需要和前端进行协定，建议数据的返回格式为Json字符串，基本格式为：</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">resultData = &#123;</span><br><span class="line">    status: &#123;</span><br><span class="line">        code: <span class="number">0</span>,<span class="comment">//0:成功，1:失败</span></span><br><span class="line">        msg: <span class="string">'请求超时'</span><span class="comment">//失败时候的提示，成功可为空</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">data</span>: &#123;&#125;<span class="comment">//数据，无数据可以为空</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>其中定义了一个<code>status</code>，这样的好处是无论在Native方法调用成功与否、Native方法是否有返回值，Js中都可以收到返回的信息，而这个Json字符串至少都会包含一个<code>status</code>Json对象来描述Native方法调用的状况</p>
<p>而返回给Js的方法自然是上面的<code>onComplete</code>方法：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">javascript</span><span class="pseudo">:RainbowBridge</span><span class="class">.onComplete</span>(<span class="tag">port</span>,<span class="tag">resultData</span>);</span><br></pre></td></tr></table></figure>
<p>ps:RainbowBridge是我的JsBridge框架的名字</p>
<hr>
<p>至此Js调用Native的流程就分析完成了，一切都看起来那么美妙，因为，我们自己实现一套<code>Js Invoke Native</code>的主要目的是让Js调用Native更加安全，同时也只维护一套<code>JsBridge</code>框架更加方便，那么这个安全性表现在哪里了？<br>我们知道之前原生的方式漏洞就是恶意Js代码可能会调用Native中的其它方法，那么答案出来了，如果需要让<code>Js Invoke Native</code>保证安全性，只需要限制我们通过反射可调用的方法，所以，在JsBridge框架中，我们需要对Js能调用的Native方法给予一定的规则，只有符合这些规则Js才能调用，而我的规则是：</p>
<blockquote>
<p><strong>1、</strong>Native方法包含public static void 这些修饰符（当然还可能有其它的，如：synchronized）<br><strong>2、</strong>Native方法的参数数量和类型只能有这三个：WebView、JSONObject、JsCallback。为什么要传入这三个参数呢？<br><strong>2.1、</strong>第一个参数是为了提供一个WebView对象，以便获取对应Context和执行WebView的一些方法<br><strong>2.2、</strong>第二个参数就是Js中传入过来的参数，这个肯定要的<br><strong>2.3、</strong>第三个参数就是当Native方法执行完毕后，把执行后的结果回调给Js对应的方法中</p>
</blockquote>
<p>所以符合Js调用的Native方法格式为：</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">static</span> <span class="type">void</span> ***(<span class="type">WebView</span> webView, <span class="type">JSONObject</span> data, <span class="type">JsCallback</span> callback) &#123;</span><br><span class="line">	//get some info ...</span><br><span class="line">	<span class="type">JsCallback</span>.invokeJsCallback(callback, <span class="literal">true</span>, <span class="literal">result</span>, null);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>判断Js调用的方法是否符合该格式的代码为，符合则存入一个Map中供Js调用：</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">private <span class="type">void</span> putMethod(<span class="type">Class</span>&lt;?&gt; clazz) &#123;</span><br><span class="line">    <span class="keyword">if</span> (clazz == null)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">ArrayMap</span>&lt;<span class="type">String</span>, <span class="type">Method</span>&gt; arrayMap = new <span class="type">ArrayMap</span>&lt;&gt;();</span><br><span class="line">    <span class="type">Method</span> <span class="keyword">method</span>;</span><br><span class="line">    <span class="type">Method</span>[] methods = clazz.getDeclaredMethods();</span><br><span class="line">    <span class="type">int</span> length = methods.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        <span class="keyword">method</span> = methods[i];</span><br><span class="line">        <span class="type">int</span> methodModifiers = <span class="keyword">method</span>.getModifiers();</span><br><span class="line">        <span class="keyword">if</span> ((methodModifiers &amp; <span class="type">Modifier</span>.<span class="type">PUBLIC</span>) != <span class="number">0</span> &amp;&amp; (methodModifiers &amp; <span class="type">Modifier</span>.<span class="type">STATIC</span>) != <span class="number">0</span> &amp;&amp; <span class="keyword">method</span>.getReturnType() == <span class="type">void</span>.class) &#123;</span><br><span class="line">            <span class="type">Class</span>&lt;?&gt;[] parameterTypes = <span class="keyword">method</span>.getParameterTypes();</span><br><span class="line">            <span class="keyword">if</span> (parameterTypes != null &amp;&amp; parameterTypes.length == <span class="number">3</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="type">WebView</span>.class == parameterTypes[<span class="number">0</span>] &amp;&amp; <span class="type">JSONObject</span>.class == parameterTypes[<span class="number">1</span>] &amp;&amp; <span class="type">JsCallback</span>.class == parameterTypes[<span class="number">2</span>]) &#123;</span><br><span class="line">                    arrayMap.put(<span class="keyword">method</span>.getName(), <span class="keyword">method</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    mArrayMap.put(clazz.getSimpleName(), arrayMap);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对于有返回值的方法，并不需要设置它的返回值，因为方法的结果最后我们是通过<code>JsCallback.invokeJsCallback</code>来进行对Js层的回调，比如我贴一个符合该格式的Native方法：</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">static</span> <span class="type">void</span> getOsSdk(<span class="type">WebView</span> webView, <span class="type">JSONObject</span> data, <span class="type">JsCallback</span> callback) &#123;</span><br><span class="line">    <span class="type">JSONObject</span> <span class="literal">result</span> = new <span class="type">JSONObject</span>();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="literal">result</span>.put(<span class="string">"os_sdk"</span>, <span class="type">Build</span>.<span class="type">VERSION</span>.<span class="type">SDK_INT</span>);</span><br><span class="line">    &#125; catch (<span class="type">JSONException</span> e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">JsCallback</span>.invokeJsCallback(callback, <span class="literal">true</span>, <span class="literal">result</span>, null);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Js调Native代码执行耗时操作情况处理"><a href="#Js调Native代码执行耗时操作情况处理" class="headerlink" title="Js调Native代码执行耗时操作情况处理"></a><strong>Js调Native代码执行耗时操作情况处理</strong></h4><p>一般情况下，比如我们通过Js调用Native方法来获取AppName、OsSDK版本、IMSI号、用户信息等都不会有问题，但是，假如该Native方法需要执行一些耗时操作，如：IO、sp、Bitmap Decode、SQLite等，这时为了保护UI的流畅性，我们需要让这些操作执行在异步线程中，待执行完毕再把结果回调给Js，而我们可以提供一个线程池来专门处理这些耗时操作，如：</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">static</span> <span class="type">void</span> doAsync(<span class="type">WebView</span> webView, <span class="type">JSONObject</span> data, final <span class="type">JsCallback</span> callback) &#123;</span><br><span class="line">    <span class="type">AsyncTaskExecutor</span>.runOnAsyncThread(new <span class="type">Runnable</span>() &#123;</span><br><span class="line">        @<span class="type">Override</span></span><br><span class="line">        public <span class="type">void</span> run() &#123;</span><br><span class="line">            //<span class="type">IO</span>、sp、<span class="type">Bitmap</span> <span class="type">Decode</span>、<span class="type">SQLite</span></span><br><span class="line">            <span class="type">JsCallback</span>.invokeJsCallback(callback, <span class="literal">true</span>, <span class="literal">result</span>, null);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>【注】：对于WebView，它的方法的调用只能在主线程中调用，当设计到WebView的方法调用时，切记不可以放在异步线程中调用，否则就GG了.</strong></p>
<h4 id="Js调Native流程图"><a href="#Js调Native流程图" class="headerlink" title="Js调Native流程图"></a><strong>Js调Native流程图</strong></h4><p><img src="http://7xswxf.com2.z0.glb.qiniucdn.com/blog/jsbridge.png" alt="JsInvokeNative"></p>
<h4 id="JsBridge效果图"><a href="#JsBridge效果图" class="headerlink" title="JsBridge效果图"></a><strong>JsBridge效果图</strong></h4><p><img src="http://7xswxf.com2.z0.glb.clouddn.com/blog/js.gif" alt="RainbowBridge"><br>RainbowBridge:<a href="https://github.com/Sunzxyong/RainbowBridge" target="_blank" rel="external">github地址</a></p>
<h3 id="白名单Check"><a href="#白名单Check" class="headerlink" title="白名单Check"></a><strong>白名单Check</strong></h3><p>上面我们介绍了JsBridge的基本原理，实现了Js与Native相互调用，而且还避免了恶意Js代码调用Native方法的安全问题，通过这样我们保证了Js调用Native方法的安全性，即Js不能随意调用任意Native方法，不过，对于WebView容器来说，它并不关心所加载的url是Js代码还是网页地址，它所做的工作就是执行我们传入的url，而WebView加载url的方式有两种：get和post，方式如下：</p>
<figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mWebView.loadUrl<span class="comment">(url)</span>;<span class="comment">//get</span></span><br><span class="line">mWebView.postUrl<span class="comment">(url,data)</span>;<span class="comment">//post</span></span><br></pre></td></tr></table></figure>
<p>对于这两种方式，也有不同的应用点，一般get方式用于查，也就是传入的数据不那么重要，比如：商品列表页、商品详情页等，这些传入的数据只是一些商品类的信息。而post方式一般用于改，post传入的数据往往是比较私密的，比如：订单界面、购物车界面等，这些界面只有在把用户的信息post给服务器后，服务器才能正确的返回相应的信息显示在界面上。所以，对于post方式涉及到用户的私密信息，我们总不能给一个url就把私密数据往这个url里面发吧，当然不可能的，这涉及到安全问题，那么就需要一个白名单机制来检查url是否是我们自己的，是我们自己的那么即可以post数据，不是我们自己的那就不post数据，而白名单的定义通常可以以我们自己的域名来判断，搞一个正则表达式，所以我们可以重写WebView的<code>postUrl</code>方法：</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">postUrl</span><span class="params">(String url, <span class="keyword">byte</span>[] postData)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (JsBridgeUrlCheckUtil.isTrustUrl(url)) &#123;</span><br><span class="line">        <span class="keyword">super</span>.postUrl(url, postData);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.postUrl(url, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样就对不是我们自己的url进行了拦截，不把数据发送到不是我们自己的服务器中</p>
<p>至此，白名单的Check还没有完成，因为这只是对WebView加载Url时候做的检查，而在WebView内各中链接的跳转、其中有些url还可能被运营商劫持注入了广告，这就有可能在WebView容器内的跳转到某些界面后，该界面的url并不是我们自己的，但是它里面有Js代码调用Native方法来获取一些数据，虽然说Js并不能随便调我们的Native方法，但是有些我们指定可以被调用的Native方法可能有一些获取设备信息、读取文件、获取用户信息等方法，所以，我们也应该在Js调用Native方法时做一层白名单Check，这样才能保证我们的信息安全</p>
<p>所以，白名单检测需要在两个地方进行检测：</p>
<blockquote>
<p>1、WebView:postUrl()前检测url的合法性<br>2、Js调用Native方法前检测当前界面url的合法性</p>
</blockquote>
<p>具体代码如下：</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">postUrl</span><span class="params">(String url, <span class="keyword">byte</span>[] postData)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (JsBridgeUrlCheckUtil.isTrustUrl(url)) &#123;</span><br><span class="line">        <span class="keyword">super</span>.postUrl(url, postData);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.postUrl(url, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span><br><span class="line"> * <span class="doctag">@param</span> webView WebView</span><br><span class="line"> * <span class="doctag">@param</span> message rainbow://class:port/method?params</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">call</span><span class="params">(WebView webView, String message)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (webView == <span class="keyword">null</span> || TextUtils.isEmpty(message))</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (JsBridgeUrlCheckUtil.isTrustUrl(webView.getUrl())) &#123;</span><br><span class="line">        parseMessage(message);</span><br><span class="line">        invokeNativeMethod(webView);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="移除默认内置接口"><a href="#移除默认内置接口" class="headerlink" title="移除默认内置接口"></a><strong>移除默认内置接口</strong></h3><p>WebView内置默认也注入了一些接口，如下：</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//移除默认内置接口,防止远程代码执行漏洞攻击</span></span><br><span class="line"><span class="keyword">if</span> (Build.<span class="keyword">VERSION</span>.SDK_INT &gt;= Build.VERSION_CODES.HONEYCOMB) &#123;</span><br><span class="line">    mWebView.removeJavascriptInterface(<span class="string">"searchBoxJavaBridge_"</span>);</span><br><span class="line">    mWebView.removeJavascriptInterface(<span class="string">"accessibility"</span>);</span><br><span class="line">    mWebView.removeJavascriptInterface(<span class="string">"accessibilityTraversal"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这些接口虽然不会影响用prompt方式实现的Js与Native交互，但是在使用addJavascriptInterface方式时，有可能有安全问题，最好移除</p>
<h2 id="WebView相关"><a href="#WebView相关" class="headerlink" title="WebView相关"></a><strong>WebView相关</strong></h2><h3 id="WebView的配置"><a href="#WebView的配置" class="headerlink" title="WebView的配置"></a><strong>WebView的配置</strong></h3><p>下面给出WebView的通用配置：</p>
<figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">WebSettings webSettings = mWebView.getSettings();</span><br><span class="line">webSettings.setJavaScriptEnabled(<span class="literal">true</span>);</span><br><span class="line">webSettings.setJavaScriptCanOpenWindowsAutomatically(<span class="literal">true</span>);</span><br><span class="line">webSettings.setSupportZoom(<span class="literal">false</span>);</span><br><span class="line">webSettings.setBuiltInZoomControls(<span class="literal">false</span>);</span><br><span class="line">webSettings.setAllowFileAccess(<span class="literal">true</span>);</span><br><span class="line">webSettings.setDatabaseEnabled(<span class="literal">true</span>);</span><br><span class="line">webSettings.setDomStorageEnabled(<span class="literal">true</span>);</span><br><span class="line">webSettings.setGeolocationEnabled(<span class="literal">true</span>);</span><br><span class="line">webSettings.setAppCacheEnabled(<span class="literal">true</span>);</span><br><span class="line">webSettings.setAppCachePath(getApplicationContext().getCacheDir().getPath());</span><br><span class="line">webSettings.setDefaultTextEncodingName(<span class="string">"UTF-8"</span>);</span><br><span class="line">//屏幕自适应</span><br><span class="line">webSettings.setUseWideViewPort(<span class="literal">true</span>);</span><br><span class="line">webSettings.setLoadWithOverviewMode(<span class="literal">true</span>);</span><br><span class="line"><span class="keyword">if</span> (Build.<span class="literal">VERSION</span>.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;</span><br><span class="line">    webSettings.setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    webSettings.setCacheMode(WebSettings.LOAD_DEFAULT);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (Build.<span class="literal">VERSION</span>.SDK_INT &gt;= Build.VERSION_CODES.HONEYCOMB) &#123;</span><br><span class="line">    webSettings.setDisplayZoomControls(<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (Build.<span class="literal">VERSION</span>.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;</span><br><span class="line">    webSettings.setLoadsImagesAutomatically(<span class="literal">true</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    webSettings.setLoadsImagesAutomatically(<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mWebView.setScrollBarStyle(WDWebView.SCROLLBARS_INSIDE_OVERLAY);</span><br><span class="line">mWebView.setHorizontalScrollBarEnabled(<span class="literal">false</span>);</span><br><span class="line">mWebView.setHorizontalFadingEdgeEnabled(<span class="literal">false</span>);</span><br><span class="line">mWebView.setVerticalFadingEdgeEnabled(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure>
<p>其中有一项配置，是在4.4以上版本时设置网页内图片可以自动加载，而4.4以下版本则不可自动加载，原因是4.4WebView内核的改变，使得WebView的性能更优，所以在4.4以下版本不让图片自动加载，而是先让WebView加载网页的其它静态资源：js、css、文本等等，待网页把这些静态资源加载完成后，在<code>onPageFinished</code>方法中再把图片自动加载打开让网页加载图片：</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onPageFinished</span><span class="params">(WebView view, String url)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onPageFinished(view, url);</span><br><span class="line">    <span class="keyword">if</span> (!mWebView.getSettings().getLoadsImagesAutomatically()) &#123;</span><br><span class="line">        mWebView.getSettings().setLoadsImagesAutomatically(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="WebView的独立进程"><a href="#WebView的独立进程" class="headerlink" title="WebView的独立进程"></a><strong>WebView的独立进程</strong></h3><p>通常来说，WebView的使用会带来诸多问题，内存泄露就是最常见的问题，为了避免WebView内存泄露，目前最流行的有两种做法：</p>
<blockquote>
<p>1、独立进程，简单暴力，不过可能涉及到进程间通信<br>2、动态添加WebView，对传入WebView中使用的Context使用弱引用，动态添加WebView意思在布局创建个ViewGroup用来放置WebView，Activity创建时add进来，在Activity停止时remove掉</p>
</blockquote>
<p>个人推荐独立进程，好处主要有两点，一是在WebViewActivity使用完毕后直接干掉该进程，防止了内存泄露，二是为我们的app主进程减少了额外的内存占用量</p>
<p>使用独立进程还需注意一点，这个进程中在有多个WebViewActivity，不能在Activity销毁时就干掉进程，不然其它Activity也会蹦了，此时应该在该进程创建一个Activity的维护集合，集合为空时即可干掉进程</p>
<p>关于WebView的销毁，如下：</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">destroyWebView</span><span class="params">(WebView webView)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (webView == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    webView.stopLoading();</span><br><span class="line">    ViewParent viewParent = webView.getParent();</span><br><span class="line">    <span class="keyword">if</span> (viewParent != <span class="keyword">null</span> &amp;&amp; viewParent <span class="keyword">instanceof</span> ViewGroup)</span><br><span class="line">        ((ViewGroup) viewParent).removeView(webView);</span><br><span class="line">    webView.removeAllViews();</span><br><span class="line">    webView.destroy();</span><br><span class="line">    webView = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="WebView的兼容性"><a href="#WebView的兼容性" class="headerlink" title="WebView的兼容性"></a><strong>WebView的兼容性</strong></h3><h4 id="不同版本硬件加速的问题"><a href="#不同版本硬件加速的问题" class="headerlink" title="不同版本硬件加速的问题"></a><strong>不同版本硬件加速的问题</strong></h4><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.ICE_CREAM_SANDWICH_MR1 &amp;&amp; shouldOpenHardware()) &#123;</span><br><span class="line">    mWebView.setLayerType(View.LAYER_TYPE_HARDWARE, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">boolean</span> <span class="title">shouldOpenHardware</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"samsung"</span>.equalsIgnoreCase(Build.BRAND))</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="不同设备点击WebView输入框键盘的不弹起"><a href="#不同设备点击WebView输入框键盘的不弹起" class="headerlink" title="不同设备点击WebView输入框键盘的不弹起"></a><strong>不同设备点击WebView输入框键盘的不弹起</strong></h4><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mWebView.setOnTouchListener(<span class="keyword">new</span> View.OnTouchListener() &#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onTouch</span><span class="params">(View v, MotionEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (mWebView != <span class="keyword">null</span>)</span><br><span class="line">                mWebView.requestFocus();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="三星手机硬件加速关闭后导致H5弹出的对话框出现不消失情况"><a href="#三星手机硬件加速关闭后导致H5弹出的对话框出现不消失情况" class="headerlink" title="三星手机硬件加速关闭后导致H5弹出的对话框出现不消失情况"></a><strong>三星手机硬件加速关闭后导致H5弹出的对话框出现不消失情况</strong></h4><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">String </span><span class="keyword">brand </span>= <span class="keyword">android.os.Build.BRAND;</span><br><span class="line"></span><span class="label">if</span> (<span class="string">"samsung"</span>.equalsIgnoreCase(<span class="keyword">brand) </span>&amp;&amp; <span class="keyword">Build.VERSION.SDK_INT </span>&gt;= <span class="keyword">Build.VERSION_CODES.LOLLIPOP) </span>&#123;</span><br><span class="line">    getWindow().setFlags(</span><br><span class="line">            WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED,</span><br><span class="line">            WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED)<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="不同版本shouldOverrideUrlLoading的回调时机"><a href="#不同版本shouldOverrideUrlLoading的回调时机" class="headerlink" title="不同版本shouldOverrideUrlLoading的回调时机"></a><strong>不同版本shouldOverrideUrlLoading的回调时机</strong></h4><p>对于<code>shouldOverrideUrlLoading</code>的加载时机，有些同学经常与<code>onProgressChanged</code>这个方法的加载时机混淆，这两个方法有两点不同：</p>
<blockquote>
<p>1、<code>shouldOverrideUrlLoading</code>只会走Get方式的请求，Post方式的请求将不会回调这个方法，而<code>onProgressChanged</code>对Get和Post都会走<br>2、<code>shouldOverrideUrlLoading</code>都知道在WebView内部点击链接（Get）会触发，它在Get请求打开界面时也会触发，<code>shouldOverrideUrlLoading</code>还有一点特殊，就是在按返回键返回到上一个页面时时不会触发的，而<code>onProgressChanged</code>在只要界面更新了都会触发</p>
</blockquote>
<p>对于<code>shouldOverrideUrlLoading</code>的返回值，返回true为剥夺WebView对该此请求的控制权，交给应用自己处理，所以WebView也不会加载该url了，返回false为WebView自己处理</p>
<p>对于<code>shouldOverrideUrlLoading</code>的调用时机，也会有不同，在3.0以上是会正常调用的，而在3.0以下，并不是每次都会调用，可以在<code>onPageStarted</code>方法中做处理，也没必要了，现在应该都适配4.0以上了</p>
<h4 id="页面重定向导致WebView-goBack-无效的处理"><a href="#页面重定向导致WebView-goBack-无效的处理" class="headerlink" title="页面重定向导致WebView:goBack()无效的处理"></a><strong>页面重定向导致WebView:goBack()无效的处理</strong></h4><p>像一些界面有重定向，比如：淘宝等，需要按多次（&gt;1）才能正常返回，一般都是二次，所以可以把那些具有重定向的界面存入一个集合中，在拦截返回事件中这样处理：</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> onBackPressed() &#123;</span><br><span class="line">    <span class="keyword">if</span> (mWebView == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    WebBackForwardList backForwardList = mWebView.copyBackForwardList();</span><br><span class="line">    <span class="keyword">if</span> (backForwardList != <span class="keyword">null</span> &amp;&amp; backForwardList.getSize() != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">int</span> currentIndex = backForwardList.getCurrentIndex();</span><br><span class="line">        WebHistoryItem historyItem = backForwardList.getItemAtIndex(currentIndex - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (historyItem != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">String</span> backPageUrl = historyItem.getUrl();</span><br><span class="line">            <span class="keyword">if</span> (TextUtils.isEmpty(backPageUrl))</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            <span class="built_in">int</span> <span class="built_in">size</span> = REDIRECT_URL.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (backPageUrl.contains(REDIRECT_URL.<span class="built_in">get</span>(i)))</span><br><span class="line">                    mWebView.goBack();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (mWebView.canGoBack()) &#123;</span><br><span class="line">        mWebView.goBack();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.finish();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里处理是在按返回键时，如果上一个界面是重定向界面，则直接调用goBack，或者也可以finish当前Activity</p>
<h4 id="WebView无法加载不信任网页SSL错误的处理"><a href="#WebView无法加载不信任网页SSL错误的处理" class="headerlink" title="WebView无法加载不信任网页SSL错误的处理"></a><strong>WebView无法加载不信任网页SSL错误的处理</strong></h4><p>有时我们的WebView会加载一些不信任的网页，这时候默认的处理是WebView停止加载了，而那些不信任的网页都不是由CA机构信任的，这时候你可以选择继续加载或者让手机内的浏览器来加载：</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onReceivedSslError</span><span class="params">(WebView view, <span class="keyword">final</span> SslErrorHandler <span class="keyword">handler</span>, SslError <span class="keyword">error</span>)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//继续加载</span></span><br><span class="line">    <span class="keyword">handler</span>.<span class="keyword">proceed</span>();</span><br><span class="line">    <span class="comment">//或者其它处理 ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="自定义WebView加载出错界面"><a href="#自定义WebView加载出错界面" class="headerlink" title="自定义WebView加载出错界面"></a><strong>自定义WebView加载出错界面</strong></h4><p>出错的界面的显示，可以在这个方法中控制：</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onReceivedError</span><span class="params">(WebView view, WebResourceRequest request, WebResourceError <span class="keyword">error</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onReceivedError(view, request, <span class="keyword">error</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>你可以重新加载一段Html专门用来显示错误界面，或者用布局显示一个出错的View，这时候需要把出错的WebView内容清除，可以使用：</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onReceivedError</span><span class="params">(WebView view, WebResourceRequest request, WebResourceError <span class="keyword">error</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onReceivedError(view, request, <span class="keyword">error</span>);</span><br><span class="line">    view.loadDataWithBaseURL(<span class="keyword">null</span>,<span class="string">""</span>,<span class="string">"text/html"</span>,<span class="string">"UTF-8"</span>,<span class="keyword">null</span>);</span><br><span class="line">    errorView.setVisibility(View.VISIBLE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="获取位置权限的处理"><a href="#获取位置权限的处理" class="headerlink" title="获取位置权限的处理"></a><strong>获取位置权限的处理</strong></h4><p>如果在WebView中有获取地理位置的请求，那么可以直接在代码中默认处理了，没必要弹出一个框框让用户每次都确认：</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onGeolocationPermissionsShowPrompt</span><span class="params">(String origin, GeolocationPermissions.Callback callback)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onGeolocationPermissionsShowPrompt(origin, callback);</span><br><span class="line">    callback.invoke(origin, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="打造一个通用的WebViewActivity界面"><a href="#打造一个通用的WebViewActivity界面" class="headerlink" title="打造一个通用的WebViewActivity界面"></a><strong>打造一个通用的WebViewActivity界面</strong></h3><p>一个通用的WebViewActivity当然是样式和WebView内部处理的策略都统一样，这里只对样式进行说明，因为WebView内部的处理各个公司都不一样，但应该都需要包含这么几点吧：</p>
<blockquote>
<p>1、白名单检测<br>2、Url的跳转<br>3、出错的处理<br>4、…</p>
</blockquote>
<p>一个WebViewActivity界面，最主要的就是Toolbar标题栏的设计了，因为不同的app的WebViewActivity界面Toolbar上有不同的icon和操作，比如：分享按钮、刷新按钮、更多按钮，都不一样，既然需要通用，即可让调用者传入某个参数来动态改变这些东西吧，比如传一个ToolbarStyle来标识此WebViewActivity的风格是什么样的，背景色、字体颜色、图标等，包括点击时的动画效果，作为通用的界面，必须是让调用者简单操作，不可能调用时传入一个图标id还是一个Drawable，所以，主要需要用到tint，来对字体、图标的颜色动态改变，代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ColorStateList <span class="title">createColorStateList</span><span class="params">(<span class="keyword">int</span> normal, <span class="keyword">int</span> pressed)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] colors = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;normal, pressed&#125;;</span><br><span class="line">    <span class="keyword">int</span>[][] states = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>][];</span><br><span class="line">    states[<span class="number">0</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-android.R.attr.state_pressed&#125;;</span><br><span class="line">    states[<span class="number">1</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;android.R.attr.state_pressed&#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ColorStateList(states, colors);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Drawable <span class="title">tintDrawable</span><span class="params">(Drawable drawable, <span class="keyword">int</span> color)</span> </span>&#123;</span><br><span class="line">    final Drawable tintDrawable = DrawableCompat.wrap(drawable.mutate());</span><br><span class="line">    ColorStateList colorStateList = ColorStateList.valueOf(color);</span><br><span class="line">    DrawableCompat.setTintMode(tintDrawable, PorterDuff.Mode.SRC_IN);</span><br><span class="line">    DrawableCompat.setTintList(tintDrawable, colorStateList);</span><br><span class="line">    <span class="keyword">return</span> tintDrawable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="H5与Native界面互相唤起"><a href="#H5与Native界面互相唤起" class="headerlink" title="H5与Native界面互相唤起"></a><strong>H5与Native界面互相唤起</strong></h2><p>对于H5界面，有些操作往往是需要唤起Native界面的，比如：H5中的登录按钮，点击后往往唤起Native的登录界面来进行登录，而不是直接在H5登录，这样一个app就只需要一套登录了，而我们所做的便是拦截登录按钮的url：</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">shouldOverrideUrlLoading</span><span class="params">(WebView view, String url)</span> </span>&#123;</span><br><span class="line">    parserURL(url); <span class="comment">//解析url,如果符合跳转native界面的url规则，则跳转native界面</span></span><br><span class="line">    <span class="function"><span class="keyword">return</span> <span class="keyword">super</span>.<span class="title">shouldOverrideUrlLoading</span><span class="params">(view, url)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个规则我们可以在Native的Activity的<code>intent-filter</code>中的<code>data</code>来定义，如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">activity</span> <span class="attribute">android:name</span>=<span class="value">".LoginActivity"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">action</span> <span class="attribute">android:name</span>=<span class="value">"android.intent.action.VIEW"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">category</span> <span class="attribute">android:name</span>=<span class="value">"android.intent.category.DEFAULT"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">data</span></span><br><span class="line">            <span class="attribute">android:host</span>=<span class="value">"native"</span></span><br><span class="line">            <span class="attribute">android:path</span>=<span class="value">"/login"</span></span><br><span class="line">            <span class="attribute">android:scheme</span>=<span class="value">"activity"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">activity</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>解析url过程是判断scheme、host、path的是否有完全与之匹配的，有则唤起</p>
<p>而Native唤H5，其实也是一个url的解析过程，只不过需要配置WebViewActivity的<code>intent-filter</code>的<code>data</code>，WebViewActivity的scheme配置为http和https</p>
<h3 id="startActivity-VS-UrlRouter"><a href="#startActivity-VS-UrlRouter" class="headerlink" title="startActivity VS UrlRouter"></a><strong>startActivity VS UrlRouter</strong></h3><p>上面说到了H5与Native互相调起，其实这个可以在app内做成一套界面跳转的方式，摒弃startActivity，为什么原生的跳转方式不佳？</p>
<blockquote>
<p>1、因为原生的跳转需要确定该Activity是已经存在的，否则编译将报错，这样带来的问题是不利于协同开发，如：A、B同学分别正在开发项目的两个不同的模块，此时B刚好需要跳A同学的某一个界面，如商品列表页跳商品详情页，这时候B就必须写个TODO，待B完成该模块后再写了。而通过url跳转，只需要传入一串url即可<br>2、原生的跳转Activity与目标Activity是耦合的，跳转Activity完全依赖于目标Activity<br>3、原生的跳转方式不利于管理所传递来的参数，获取参数时需要在跳转Activity的地方确定传递了几个参数、什么类型的参数，这样以来跳转的方式多了，就比较混乱了。当然一个原生跳转良好的设计是在目的Activity实现一个静态的start方法，其它界面要跳直接调用即可<br>4、最后一个就是在有参数传递的情况下，每次跳转都要写好多代码啊</p>
</blockquote>
<p>而UrlRouter框架的实现原理，一种实现是可以维护一套Activity与url的映射表，这种方式还是没有摆脱不利于协同开发这个毛病，另外一种是通过一串指定规则的url与manifest中配置的data匹配，具体跳转则是通过<code>intent.setData()</code>来设置跳转的url，这种方式比较好，不过需要处理下匹配到多个Activity时优先选择的问题</p>
<p><strong>JsBridge地址</strong>：<a href="https://github.com/Sunzxyong/RainbowBridge" target="_blank" rel="external">RainbowBridge</a></p>
<hr>
<p><strong>—转载请注明出处</strong></p>
]]></content:encoded>
      
      <comments>http://zhengxiaoyong.me/2016/04/20/Native%E4%B8%8EH5%E4%BA%A4%E4%BA%92%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Android性能优化之Bitmap的内存优化</title>
      <link>http://zhengxiaoyong.me/2016/02/23/Android%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B9%8BBitmap%E7%9A%84%E5%86%85%E5%AD%98%E4%BC%98%E5%8C%96/</link>
      <guid>http://zhengxiaoyong.me/2016/02/23/Android%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B9%8BBitmap%E7%9A%84%E5%86%85%E5%AD%98%E4%BC%98%E5%8C%96/</guid>
      <pubDate>Tue, 23 Feb 2016 02:53:30 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;BitmapFactory解析Bitmap的原理&quot;&gt;&lt;a href=&quot;#BitmapFactory解析Bitmap的原理&quot; class=&quot;headerlink&quot; title=&quot;BitmapFactory解析Bitmap的原理&quot;&gt;&lt;/a&gt;&lt;strong&gt;BitmapFactory解析Bitmap的原理&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;BitmapFactory提供的解析Bitmap的静态工厂方法有以下五种：&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Bitmap &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;decodeFile&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(...)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Bitmap &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;decodeResource&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(...)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Bitmap &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;decodeByteArray&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(...)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Bitmap &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;decodeStream&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(...)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Bitmap &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;decodeFileDescriptor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(...)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中常用的三个：decodeFile、decodeResource、decodeStream。&lt;br&gt;decodeFile和decodeResource其实最终都是调用decodeStream方法来解析Bitmap，decodeStream的内部则是调用两个native方法解析Bitmap的：&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;nativeDecodeAsset&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;nativeDecodeStream&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这两个native方法只是对应decodeFile和decodeResource、decodeStream来解析的，像decodeByteArray、decodeFileDescriptor也有专门的native方法负责解析Bitmap。&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="BitmapFactory解析Bitmap的原理"><a href="#BitmapFactory解析Bitmap的原理" class="headerlink" title="BitmapFactory解析Bitmap的原理"></a><strong>BitmapFactory解析Bitmap的原理</strong></h2><p>BitmapFactory提供的解析Bitmap的静态工厂方法有以下五种：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Bitmap <span class="function"><span class="title">decodeFile</span><span class="params">(...)</span></span></span><br><span class="line">Bitmap <span class="function"><span class="title">decodeResource</span><span class="params">(...)</span></span></span><br><span class="line">Bitmap <span class="function"><span class="title">decodeByteArray</span><span class="params">(...)</span></span></span><br><span class="line">Bitmap <span class="function"><span class="title">decodeStream</span><span class="params">(...)</span></span></span><br><span class="line">Bitmap <span class="function"><span class="title">decodeFileDescriptor</span><span class="params">(...)</span></span></span><br></pre></td></tr></table></figure>
<p>其中常用的三个：decodeFile、decodeResource、decodeStream。<br>decodeFile和decodeResource其实最终都是调用decodeStream方法来解析Bitmap，decodeStream的内部则是调用两个native方法解析Bitmap的：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">nativeDecodeAsset</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">nativeDecodeStream</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>
<p>这两个native方法只是对应decodeFile和decodeResource、decodeStream来解析的，像decodeByteArray、decodeFileDescriptor也有专门的native方法负责解析Bitmap。<br><a id="more"></a><br>接下来就是看看这两个方法在解析Bitmap时究竟有什么区别decodeFile、decodeResource，查看后发现它们调用路径如下：</p>
<blockquote>
<p>decodeFile-&gt;decodeStream<br>decodeResource-&gt;decodeResourceStream-&gt;decodeStream</p>
</blockquote>
<p>decodeResource在解析时多调用了一个<strong>decodeResourceStream</strong>方法，而这个decodeResourceStream方法代码如下：</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">decodeResourceStream</span>(<span class="params">Resources res, TypedValue <span class="keyword">value</span>,</span><br><span class="line">        InputStream <span class="keyword">is</span>, Rect pad, Options opts</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (opts == <span class="keyword">null</span>) &#123;</span><br><span class="line">        opts = <span class="keyword">new</span> Options();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (opts.inDensity == <span class="number">0</span> &amp;&amp; <span class="keyword">value</span> != <span class="keyword">null</span>) &#123;</span><br><span class="line">        final <span class="keyword">int</span> density = <span class="keyword">value</span>.density;</span><br><span class="line">        <span class="keyword">if</span> (density == TypedValue.DENSITY_DEFAULT) &#123;</span><br><span class="line">            opts.inDensity = DisplayMetrics.DENSITY_DEFAULT;</span><br><span class="line">        &#125; <span class="function"><span class="keyword">else</span> <span class="title">if</span> (<span class="params">density != TypedValue.DENSITY_NONE</span>) </span>&#123;</span><br><span class="line">            opts.inDensity = density;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (opts.inTargetDensity == <span class="number">0</span> &amp;&amp; res != <span class="keyword">null</span>) &#123;</span><br><span class="line">        opts.inTargetDensity = res.getDisplayMetrics().densityDpi;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> decodeStream(<span class="keyword">is</span>, pad, opts);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>它主要是对Options进行处理了，在得到<strong>opts.inDensity</strong>属性的前提下，如果我们没有对该属性设定值，那么将opts.inDensity = DisplayMetrics.DENSITY_DEFAULT;赋定这个默认的Density值，这个默认值为160，为标准的dpi比例，即在Density=160的设备上1dp=1px，这个方法中还有这么一行</p>
<blockquote>
<p>opts.inTargetDensity = res.getDisplayMetrics().densityDpi;</p>
</blockquote>
<p>对<strong>opts.inTargetDensity</strong>进行了赋值，该值为当前设备的densityDpi值，所以说在decodeResourceStream方法中主要做了两件事：</p>
<blockquote>
<p>1、对opts.inDensity赋值，没有则赋默认值160<br>2、对opts.inTargetDensity赋值，没有则赋当前设备的densityDpi值</p>
</blockquote>
<p>之后重点来了，之后参数将传入decodeStream方法，该方法中在调用native方法进行解析Bitmap后会调用这个方法<strong>setDensityFromOptions(bm, opts);</strong>：</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="function"><span class="keyword">void</span> <span class="title">setDensityFromOptions</span><span class="params">(Bitmap outputBitmap, Options opts)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (outputBitmap == <span class="keyword">null</span> || opts == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> density = opts.inDensity;</span><br><span class="line">    <span class="keyword">if</span> (density != <span class="number">0</span>) &#123;</span><br><span class="line">        outputBitmap.setDensity(density);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> targetDensity = opts.inTargetDensity;</span><br><span class="line">        <span class="keyword">if</span> (targetDensity == <span class="number">0</span> || density == targetDensity || density == opts.inScreenDensity) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] np = outputBitmap.getNinePatchChunk();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> isNinePatch = np != <span class="keyword">null</span> &amp;&amp; NinePatch.isNinePatchChunk(np);</span><br><span class="line">        <span class="keyword">if</span> (opts.inScaled || isNinePatch) &#123;</span><br><span class="line">            outputBitmap.setDensity(targetDensity);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="function"><span class="keyword">else</span> <span class="title">if</span> <span class="params">(opts.inBitmap != <span class="keyword">null</span>)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// bitmap was reused, ensure density is reset</span></span><br><span class="line">        outputBitmap.setDensity(Bitmap.getDefaultDensity());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该方法主要就是把刚刚赋值过的两个属性inDensity和inTargetDensity给Bitmap进行赋值，不过并不是直接赋给Bitmap就完了，中间有个判断，当inDensity的值与inTargetDensity或与设备的屏幕Density不相等时，则将应用inTargetDensity的值，如果相等则应用inDensity的值。</p>
<blockquote>
<p>所以总结来说，<strong>setDensityFromOptions</strong>方法就是把<strong>inTargetDensity</strong>的值赋给Bitmap，不过前提是opts.inScaled = true；</p>
</blockquote>
<p>进过上面的分析，可以得出这样一个结论：</p>
<blockquote>
<p>在不配置Options的情况下：<br>1、decodeFile、decodeStream在解析时不会对Bitmap进行一系列的屏幕适配，解析出来的图所占内存将是：<code>width*height*单位像素所占字节数</code><br>2、decodeResource在解析时会对Bitmap根据当前设备屏幕像素密度densityDpi的值进行缩放适配操作，使得解析出来的Bitmap与当前设备的分辨率匹配，达到一个最佳的显示效果，并且Bitmap的大小将比原始的小</p>
</blockquote>
<h3 id="关于Density、分辨率、-hdpi等res目录之间的关系"><a href="#关于Density、分辨率、-hdpi等res目录之间的关系" class="headerlink" title="关于Density、分辨率、-hdpi等res目录之间的关系"></a><strong>关于Density、分辨率、-hdpi等res目录之间的关系</strong></h3><table>
<thead>
<tr>
<th>DensityDpi</th>
<th>分辨率</th>
<th>res</th>
<th>Density</th>
</tr>
</thead>
<tbody>
<tr>
<td>160dpi</td>
<td>320x533</td>
<td>mdpi</td>
<td>1</td>
</tr>
<tr>
<td>240dpi</td>
<td>480x800</td>
<td>hdpi</td>
<td>1.5</td>
</tr>
<tr>
<td>320dpi</td>
<td>720x1280</td>
<td>xhdpi</td>
<td>2</td>
</tr>
<tr>
<td>480dpi</td>
<td>1080x1920</td>
<td>xxhdpi</td>
<td>3</td>
</tr>
<tr>
<td>560dpi</td>
<td>1440x2560</td>
<td>xxxhdpi</td>
<td>3.5</td>
</tr>
</tbody>
</table>
<p>dp与px的换算公式为：</p>
<blockquote>
<p>px = dp * Density</p>
</blockquote>
<h3 id="DisplayMetrics-densityDpi与density的区别"><a href="#DisplayMetrics-densityDpi与density的区别" class="headerlink" title="DisplayMetrics::densityDpi与density的区别"></a><strong>DisplayMetrics::densityDpi与density的区别</strong></h3><blockquote>
<p>getResources().getDisplayMetrics().densityDpi——表示屏幕的像素密度<br>getResources().getDisplayMetrics().density——1dp等于多少个像素(px)</p>
</blockquote>
<p>举个栗子：在屏幕密度为160的设备下，1dp=1px。在屏幕密度为320的设备下，1dp=2px。<br>所以这就为什么在安卓中布局建议使用dp为单位，因为可以根据当前设备的屏幕密度动态的调整进行适配</p>
<h2 id="Bitmap的优化策略"><a href="#Bitmap的优化策略" class="headerlink" title="Bitmap的优化策略"></a><strong>Bitmap的优化策略</strong></h2><h3 id="BitmapFactory-Options的属性解析"><a href="#BitmapFactory-Options的属性解析" class="headerlink" title="BitmapFactory.Options的属性解析"></a><strong>BitmapFactory.Options的属性解析</strong></h3><p>BitmapFactory.Options中有以下属性：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">in</span>Bitmap——在解析Bitmap时重用该Bitmap，不过必须等大的Bitmap而且<span class="keyword">in</span>Mutable须为<span class="literal">true</span></span><br><span class="line"><span class="keyword">in</span>Mutable——配置Bitmap是否可以更改，比如：在Bitmap上隔几个像素加一条线段</span><br><span class="line"><span class="keyword">in</span>JustDecodeBounds——为<span class="literal">true</span>仅返回Bitmap的宽高等属性</span><br><span class="line"><span class="keyword">in</span>SampleSize——须&gt;=<span class="number">1</span>,表示Bitmap的压缩比例，如：<span class="keyword">in</span>SampleSize=<span class="number">4</span>，将返回一个是原始图的<span class="number">1</span>/<span class="number">16</span>大小的Bitmap</span><br><span class="line"><span class="keyword">in</span>PreferredConfig——Bitmap.Config.ARGB_8888等</span><br><span class="line"><span class="keyword">in</span>Dither——是否抖动，默认为<span class="literal">false</span></span><br><span class="line"><span class="keyword">in</span>Premultiplied——默认为<span class="literal">true</span>，一般不改变它的值</span><br><span class="line"><span class="keyword">in</span>Density——Bitmap的像素密度</span><br><span class="line"><span class="keyword">in</span>TargetDensity——Bitmap最终的像素密度</span><br><span class="line"><span class="keyword">in</span>ScreenDensity——当前屏幕的像素密度</span><br><span class="line"><span class="keyword">in</span>Scaled——是否支持缩放，默认为<span class="literal">true</span>，当设置了这个，Bitmap将会以<span class="keyword">in</span>TargetDensity的值进行缩放</span><br><span class="line"><span class="keyword">in</span>Purgeable——当存储Pixel的内存空间在系统内存不足时是否可以被回收</span><br><span class="line"><span class="keyword">in</span>InputShareable——<span class="keyword">in</span>Purgeable为<span class="literal">true</span>情况下才生效，是否可以共享一个InputStream</span><br><span class="line"><span class="keyword">in</span>PreferQualityOverSpeed——为<span class="literal">true</span>则优先保证Bitmap质量其次是解码速度</span><br><span class="line">outWidth——返回的Bitmap的宽</span><br><span class="line">outHeight——返回的Bitmap的高</span><br><span class="line"><span class="keyword">in</span>TempStorage——解码时的临时空间，建议<span class="number">16</span>*<span class="number">1024</span></span><br></pre></td></tr></table></figure>
<h3 id="优化策略"><a href="#优化策略" class="headerlink" title="优化策略"></a><strong>优化策略</strong></h3><blockquote>
<p><strong>1、BitmapConfig的配置</strong><br><strong>2、使用decodeFile、decodeResource、decodeStream进行解析Bitmap时，配置inDensity和inTargetDensity，两者应该相等,值可以等于屏幕像素密度*0.75f</strong><br><strong>3、使用inJustDecodeBounds预判断Bitmap的大小及使用inSampleSize进行压缩</strong><br><strong>4、对Density&gt;240的设备进行Bitmap的适配（缩放Density）</strong><br><strong>5、2.3版本inNativeAlloc的使用</strong><br><strong>6、4.4以下版本inPurgeable、inInputShareable的使用</strong><br><strong>7、Bitmap的回收</strong></p>
</blockquote>
<p>针对上面方案，把Bitmap解码的代码封装成了一个工具类，如下：</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BitmapDecodeUtil</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> final <span class="keyword">int</span> DEFAULT_DENSITY = <span class="number">240</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> final <span class="keyword">float</span> SCALE_FACTOR = <span class="number">0.75</span>f;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> final Bitmap.Config DEFAULT_BITMAP_CONFIG = Bitmap.Config.RGB_565;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> BitmapFactory.<span class="function">Options <span class="title">getBitmapOptions</span>(<span class="params">Context context</span>) </span>&#123;</span><br><span class="line">        BitmapFactory.Options options = <span class="keyword">new</span> BitmapFactory.Options();</span><br><span class="line">        options.inScaled = <span class="keyword">true</span>;</span><br><span class="line">        options.inPreferredConfig = DEFAULT_BITMAP_CONFIG;</span><br><span class="line">        options.inPurgeable = <span class="keyword">true</span>;</span><br><span class="line">        options.inInputShareable = <span class="keyword">true</span>;</span><br><span class="line">        options.inJustDecodeBounds = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &lt;= Build.VERSION_CODES.GINGERBREAD_MR1) &#123;</span><br><span class="line">            Field field = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                field = BitmapFactory.Options.class.getDeclaredField(<span class="string">"inNativeAlloc"</span>);</span><br><span class="line">                field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                field.setBoolean(options, <span class="keyword">true</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> displayDensityDpi = context.getResources().getDisplayMetrics().densityDpi;</span><br><span class="line">        <span class="keyword">float</span> displayDensity = context.getResources().getDisplayMetrics().density;</span><br><span class="line">        <span class="keyword">if</span> (displayDensityDpi &gt; DEFAULT_DENSITY &amp;&amp; displayDensity &gt; <span class="number">1.5</span>f) &#123;</span><br><span class="line">            <span class="keyword">int</span> density = (<span class="keyword">int</span>) (displayDensityDpi * SCALE_FACTOR);</span><br><span class="line">            options.inDensity = density;</span><br><span class="line">            options.inTargetDensity = density;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> options;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">decodeBitmap</span>(<span class="params">Context context, <span class="keyword">int</span> resId</span>) </span>&#123;</span><br><span class="line">        checkParam(context);</span><br><span class="line">        <span class="keyword">return</span> BitmapFactory.decodeResource(context.getResources(), resId, getBitmapOptions(context));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">decodeBitmap</span>(<span class="params">Context context, String pathName</span>) </span>&#123;</span><br><span class="line">        checkParam(context);</span><br><span class="line">        <span class="keyword">return</span> BitmapFactory.decodeFile(pathName, getBitmapOptions(context));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">decodeBitmap</span>(<span class="params">Context context, InputStream <span class="keyword">is</span></span>) </span>&#123;</span><br><span class="line">        checkParam(context);</span><br><span class="line">        checkParam(<span class="keyword">is</span>);</span><br><span class="line">        <span class="keyword">return</span> BitmapFactory.decodeStream(<span class="keyword">is</span>, <span class="keyword">null</span>, getBitmapOptions(context));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">compressBitmap</span>(<span class="params">Context context,<span class="keyword">int</span> resId, <span class="keyword">int</span> maxWidth, <span class="keyword">int</span> maxHeight</span>) </span>&#123;</span><br><span class="line">        checkParam(context);</span><br><span class="line">        final TypedValue <span class="keyword">value</span> = <span class="keyword">new</span> TypedValue();</span><br><span class="line">        InputStream <span class="keyword">is</span> = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">is</span> = context.getResources().openRawResource(resId, <span class="keyword">value</span>);</span><br><span class="line">            <span class="keyword">return</span> compressBitmap(context, <span class="keyword">is</span>, maxWidth, maxHeight);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">is</span> != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">is</span>.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">compressBitmap</span>(<span class="params">Context context, String pathName, <span class="keyword">int</span> maxWidth, <span class="keyword">int</span> maxHeight</span>) </span>&#123;</span><br><span class="line">        checkParam(context);</span><br><span class="line">        InputStream <span class="keyword">is</span> = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">is</span> = <span class="keyword">new</span> FileInputStream(pathName);</span><br><span class="line">            <span class="keyword">return</span> compressBitmap(context, <span class="keyword">is</span>, maxWidth, maxHeight);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">is</span> != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">is</span>.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">compressBitmap</span>(<span class="params">Context context, InputStream <span class="keyword">is</span>, <span class="keyword">int</span> maxWidth, <span class="keyword">int</span> maxHeight</span>) </span>&#123;</span><br><span class="line">        checkParam(context);</span><br><span class="line">        checkParam(<span class="keyword">is</span>);</span><br><span class="line">        BitmapFactory.Options opt = <span class="keyword">new</span> BitmapFactory.Options();</span><br><span class="line">        opt.inJustDecodeBounds = <span class="keyword">true</span>;</span><br><span class="line">        BitmapFactory.decodeStream(<span class="keyword">is</span>, <span class="keyword">null</span>, opt);</span><br><span class="line">        <span class="keyword">int</span> height = opt.outHeight;</span><br><span class="line">        <span class="keyword">int</span> width = opt.outWidth;</span><br><span class="line">        <span class="keyword">int</span> sampleSize = computeSampleSize(width, height, maxWidth, maxHeight);</span><br><span class="line">        BitmapFactory.Options options = getBitmapOptions(context);</span><br><span class="line">        options.inSampleSize = sampleSize;</span><br><span class="line">        <span class="keyword">return</span> BitmapFactory.decodeStream(<span class="keyword">is</span>, <span class="keyword">null</span>, options);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">computeSampleSize</span>(<span class="params"><span class="keyword">int</span> width, <span class="keyword">int</span> height, <span class="keyword">int</span> maxWidth, <span class="keyword">int</span> maxHeight</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> inSampleSize = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (height &gt; maxHeight || width &gt; maxWidth) &#123;</span><br><span class="line">            final <span class="keyword">int</span> heightRate = Math.round((<span class="keyword">float</span>) height / (<span class="keyword">float</span>) maxHeight);</span><br><span class="line">            final <span class="keyword">int</span> widthRate = Math.round((<span class="keyword">float</span>) width / (<span class="keyword">float</span>) maxWidth);</span><br><span class="line">            inSampleSize = heightRate &lt; widthRate ? heightRate : widthRate;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (inSampleSize % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">            inSampleSize -= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> inSampleSize &lt;= <span class="number">1</span> ? <span class="number">1</span> : inSampleSize;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">checkParam</span>(<span class="params">T param</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(param == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>主要有两类方法：<br>一、decodeBitmap:对Bitmap不压缩，但是会根据屏幕的密度合适的进行缩放压缩<br>二、compressBimtap:对Bitmap进行超过最大宽高的压缩，同时也会根据屏幕的密度合适的进行缩放压缩。</p>
<h2 id="Bitmap优化前后性能对比"><a href="#Bitmap优化前后性能对比" class="headerlink" title="Bitmap优化前后性能对比"></a><strong>Bitmap优化前后性能对比</strong></h2><p>针对上面方案，做一下性能对比,图片大小为3.26M,分辨率为2048*2048<br>有两台设备：</p>
<h3 id="density为320的设备"><a href="#density为320的设备" class="headerlink" title="density为320的设备"></a><strong>density为320的设备</strong></h3><p><img src="http://7xswxf.com2.z0.glb.clouddn.com/blog/bitmap1.png" alt="这里写图片描述"></p>
<h3 id="density为560的设备"><a href="#density为560的设备" class="headerlink" title="density为560的设备"></a><strong>density为560的设备</strong></h3><p><img src="http://7xswxf.com2.z0.glb.clouddn.com/blog/bitmap2.png" alt="这里写图片描述"></p>
<p>可以看到，都是加载同一图片，在高屏幕像素密度的设备下所需要的内存需要很大、载入内存中的Bitmap的宽高也因设备的屏幕像素密度也改变，正如上面分析的一样，使用decodeResource会自动适配当前设备的分辨率达到一个最佳效果，而只有这个方法会自动适配其它方法将不会，依次思路，我们在封装的工具类中在每一个方法都加入了依屏幕像素密度来自动适配，而在实际中并不需要那么高清的图片，所以我们可以根据设备的density来进行缩放，比如：在400&gt;=density&gt;240的情况下x0.8,在density&gt;400的情况下x0.7，这样Bitmap所占用的内存将减少非常多，可以对面上面两个图片中bitmap和decodeBitmap两个值的大小，decodeBitmap只是对density进行了一定的缩放，而占用内存却减少非常多，而且显示效果也和原先的并无区别。<br>之后对比我们进行了inSampleSize压缩的图片，进行压缩后的效果也看不出太大区别，而占用内存也减少了很多。</p>
<h2 id="Bitmap的回收"><a href="#Bitmap的回收" class="headerlink" title="Bitmap的回收"></a><strong>Bitmap的回收</strong></h2><h3 id="Android-2-3-3-API-10-及以下的系统"><a href="#Android-2-3-3-API-10-及以下的系统" class="headerlink" title="Android 2.3.3(API 10)及以下的系统"></a><strong>Android 2.3.3(API 10)及以下的系统</strong></h3><p>在2.3以下的系统中，Bitmap的像素数据是存储在native中，Bitmap对象是存储在java堆中的，所以在回收Bitmap时，需要回收两个部分的空间：native和java堆。<br>即先调用recycle()释放native中Bitmap的像素数据，再对Bitmap对象置null，保证GC对Bitmap对象的回收</p>
<h3 id="Android-3-0-API-11-及以上的系统"><a href="#Android-3-0-API-11-及以上的系统" class="headerlink" title="Android 3.0(API 11)及以上的系统"></a><strong>Android 3.0(API 11)及以上的系统</strong></h3><p>在3.0以上的系统中，Bitmap的像素数据和对象本身都是存储在java堆中的，无需主动调用recycle()，只需将对象置null，由GC自动管理</p>
]]></content:encoded>
      
      <comments>http://zhengxiaoyong.me/2016/02/23/Android%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B9%8BBitmap%E7%9A%84%E5%86%85%E5%AD%98%E4%BC%98%E5%8C%96/#disqus_thread</comments>
    </item>
    
    <item>
      <title>关于生产者-消费者-订阅者模式的那些事</title>
      <link>http://zhengxiaoyong.me/2016/01/27/%E5%85%B3%E4%BA%8E%E7%94%9F%E4%BA%A7%E8%80%85-%E6%B6%88%E8%B4%B9%E8%80%85-%E8%AE%A2%E9%98%85%E8%80%85%E6%A8%A1%E5%BC%8F%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/</link>
      <guid>http://zhengxiaoyong.me/2016/01/27/%E5%85%B3%E4%BA%8E%E7%94%9F%E4%BA%A7%E8%80%85-%E6%B6%88%E8%B4%B9%E8%80%85-%E8%AE%A2%E9%98%85%E8%80%85%E6%A8%A1%E5%BC%8F%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/</guid>
      <pubDate>Wed, 27 Jan 2016 06:26:30 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;生产者-消费者模式&quot;&gt;&lt;a href=&quot;#生产者-消费者模式&quot; class=&quot;headerlink&quot; title=&quot;生产者/消费者模式&quot;&gt;&lt;/a&gt;&lt;strong&gt;生产者/消费者模式&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;&lt;strong&gt;简介&lt;/strong&gt;&lt;/h2&gt;&lt;h3 id=&quot;用来干嘛的？&quot;&gt;&lt;a href=&quot;#用来干嘛的？&quot; class=&quot;headerlink&quot; title=&quot;用来干嘛的？&quot;&gt;&lt;/a&gt;&lt;strong&gt;用来干嘛的？&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;生产者/消费者模式的产生主要目的就是为了解决非同步的生产与消费之间的问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;什么是非同步呢？&lt;/strong&gt;&lt;br&gt;    比如我刚刚生产了某个产品，而此时你正在打游戏，没空来取，要打完游戏来取，这就导致了我生产产品和你取产品是两个非同步的动作，你不知道我什么时候生产完产品，而我也不知道你什么时候来取。&lt;/p&gt;
&lt;p&gt;而生产者/消费者模式就是解决这个非同步问题的，因为肯定不可能我生产完一个就给你打个电话叫你来取，然后等你取完我再生产下一个，这是多么低效的一种做法。所以这个模式运用而生，这个模式在生活中也有很好的体现，如：快递员派信这个例子，我就是生产者，快递员就是消费者，而生产者与消费者之间是通过什么来解决这种非同步的问题呢？就是一个存储中介，作为快递员派信这个例子中，信箱就是这个存储中介，每次我只要把写完的信扔入信箱，而快递员隔三差五的就会来取一次信，这两个动作是完全异步的，我把信扔入信箱后就不需要管什么了，之后肯定有快递员来取。&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="生产者-消费者模式"><a href="#生产者-消费者模式" class="headerlink" title="生产者/消费者模式"></a><strong>生产者/消费者模式</strong></h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a><strong>简介</strong></h2><h3 id="用来干嘛的？"><a href="#用来干嘛的？" class="headerlink" title="用来干嘛的？"></a><strong>用来干嘛的？</strong></h3><p>生产者/消费者模式的产生主要目的就是为了解决非同步的生产与消费之间的问题。</p>
<p><strong>什么是非同步呢？</strong><br>    比如我刚刚生产了某个产品，而此时你正在打游戏，没空来取，要打完游戏来取，这就导致了我生产产品和你取产品是两个非同步的动作，你不知道我什么时候生产完产品，而我也不知道你什么时候来取。</p>
<p>而生产者/消费者模式就是解决这个非同步问题的，因为肯定不可能我生产完一个就给你打个电话叫你来取，然后等你取完我再生产下一个，这是多么低效的一种做法。所以这个模式运用而生，这个模式在生活中也有很好的体现，如：快递员派信这个例子，我就是生产者，快递员就是消费者，而生产者与消费者之间是通过什么来解决这种非同步的问题呢？就是一个存储中介，作为快递员派信这个例子中，信箱就是这个存储中介，每次我只要把写完的信扔入信箱，而快递员隔三差五的就会来取一次信，这两个动作是完全异步的，我把信扔入信箱后就不需要管什么了，之后肯定有快递员来取。<br><a id="more"></a></p>
<h2 id="如何设计"><a href="#如何设计" class="headerlink" title="如何设计"></a><strong>如何设计</strong></h2><h3 id="设计图"><a href="#设计图" class="headerlink" title="设计图"></a><strong>设计图</strong></h3><p>生产者/消费者模式能够解决非同步的生产与消费的问题，归功就是存储中介的作用，因为生产者只要把生产完的物品放入存储中介中就行了，而不必关系消费者什么时候来取，当消费者需要时自然会来取，当存储中介满了的话，那么生产者将停止生产，因为再生产就没地放了，这时候就需要等待消费者消费了，而当存储中介没有时，这时候消费者来取那肯定取不到，所以也需要Wait，等待生产者生产后才能取到。所以这就有了下面这个设计图：<br><img src="http://7xswxf.com2.z0.glb.qiniucdn.com/blog/consumer1.jpg" alt="这里写图片描述"></p>
<h3 id="定位"><a href="#定位" class="headerlink" title="定位"></a><strong>定位</strong></h3><p>从上图中可以知道，一个完整的生产者/消费者模式具有生产者、消费者、存储中介以及产品。这四个缺一不可，而关于它们的定位也至关重要<br>1 . <strong>Product</strong><br>    对于产品，什么样的对象才能成为产品呢，一是根据当时的业务逻辑来判断，比如执行完某些操作后的产生的Result，二是必须保持每个产品之间的完整性和独立性，保证各个产品之间互不影响、互不关联。<br>2 . <strong>Store</strong><br>    对于存储中介，它肯定是一块具有额定大小的存储空间，而这个存储空间一般来说具有FIFO的数据结构，比如JDK内置了具有阻塞作用的有界队列：ArrayBlockingQueue、LinkedBlockingQueue。并且存储中介需要起到生产者与消费者解耦的作用，这样的好处是当后期生产者或者消费者的生产方式或处理方式变了，这样只需要改变一方，而另外一方则不需要调整。而且它负责协调生产者与消费者之间的生产消费关系。<br>3 . <strong>Producer</strong><br>    对于生产者，它是具有配置Product各种属性的一个对象，可以设计成Factory、Builder、装饰者模式等等，一般来说生产者有单独的一个线程用来生产产品，当然如果量大的话可以用多个线程去生产，不过需要处理一下线程同步的问题（Semaphore|synchronized|ThreadLocal）<br>4 .  <strong>Consumer</strong><br>    对于消费者，和Producer差不多，主要就是用来处理Product的，一般也有单独的一个线程去处理Product。</p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a><strong>实例</strong></h2><p>1 . <strong>生产者</strong><br><code>AppleProducer</code></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> AppleProducer &#123;</span><br><span class="line">    <span class="keyword">private</span> Store&lt;Apple&gt; mStore;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ExecutorService mWorkThread = Executors.newFixedThreadPool(<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AppleProducer <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AppleProducer <span class="title">bindStore</span><span class="params">(Store&lt;Apple&gt; store)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mStore = store;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">production</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mWorkThread.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            @<span class="function">Override</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                    Thread.currentThread().interrupt();</span><br><span class="line">                &#125;</span><br><span class="line">                Apple apple = <span class="keyword">new</span> Apple(<span class="string">"第"</span> + name + <span class="string">"个产品"</span>);</span><br><span class="line">                mStore.push(apple);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2 . <strong>消费者</strong><br><code>AppleConsumer</code></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> AppleConsumer &#123;</span><br><span class="line">    <span class="keyword">private</span> Store&lt;Apple&gt; mStore;</span><br><span class="line">    <span class="keyword">private</span> ExecutorService mWorkThread = Executors.newFixedThreadPool(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AppleConsumer <span class="title">bindStore</span><span class="params">(Store&lt;Apple&gt; store)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mStore = store;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mWorkThread.submit(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            @<span class="function">Override</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                        Thread.currentThread().interrupt();</span><br><span class="line">                    &#125;</span><br><span class="line">                    Apple apple = mStore.take();</span><br><span class="line">                    System.out.println(<span class="string">"apple:"</span> + apple.getName() + <span class="string">"消费了"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3 .  <strong>存储中介</strong><br><code>Store</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Store</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> BlockingQueue&lt;T&gt; mQueue = <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">10</span>, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mQueue.put(t);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            Thread.currentThread().interrupt();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"product生产了..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">take</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        T t = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            t = mQueue.take();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            Thread.currentThread().interrupt();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"product取出了..."</span>);</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mQueue.isEmpty())</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        mQueue.clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4 . <strong>产品</strong></p>
<figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> Apple &#123;</span><br><span class="line">    <span class="keyword">private</span> String <span class="keyword">name</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Apple(String <span class="keyword">name</span>) &#123;</span><br><span class="line">        this.<span class="keyword">name</span> = <span class="keyword">name</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String getName() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">name</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> void setName(String <span class="keyword">name</span>) &#123;</span><br><span class="line">        this.<span class="keyword">name</span> = <span class="keyword">name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>5 . <strong>Test</strong></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> Test &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Store&lt;Apple&gt; store = <span class="keyword">new</span> Store&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> AppleConsumer()</span><br><span class="line">                .bindStore(store)</span><br><span class="line">                .consume();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> AppleProducer()</span><br><span class="line">                    .bindStore(store)</span><br><span class="line">                    .setName(i + <span class="string">""</span>)</span><br><span class="line">                    .production();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>result:</strong></p>
<blockquote>
<p>product生产了…<br>product生产了…<br>product生产了…<br>product生产了…<br>product生产了…<br>product取出了…<br>apple:第1个产品消费了<br>product生产了…<br>product生产了…<br>product生产了…<br>product生产了…<br>product生产了…<br>product生产了…<br>product取出了…<br>apple:第0个产品消费了<br>product生产了…<br>product取出了…<br>product生产了…<br>apple:第3个产品消费了<br>product取出了…<br>apple:第2个产品消费了<br>product生产了…<br>product取出了…<br>apple:第4个产品消费了<br>product生产了…<br>product取出了…<br>apple:第5个产品消费了<br>product生产了…<br>product取出了…<br>apple:第6个产品消费了<br>product生产了…<br>…</p>
</blockquote>
<hr>
<p>对于生产者，为了避免生产线程数量过多采取了一个线程池控制生产线程的数量，而生产者每一件产品都是由单独的一个线程来生产，对于消费者，用一个线程去轮询取队列里的产品，有则取出，没有则阻塞等待，由于ArrayBlockingQueue本身是支持并发的，所以在多线程共同操作一个存储队列的情况下，并不会有并发的问题。<br>所以生产者/消费者模式也支持多生产——多消费的模式：<br><img src="http://7xswxf.com2.z0.glb.qiniucdn.com/blog/consumer2.jpg" alt="这里写图片描述"><br>对于有众多种类不同的生产者，可以用一个工厂类来管理。</p>
<h2 id="数据源-订阅者模式"><a href="#数据源-订阅者模式" class="headerlink" title="数据源/订阅者模式"></a><strong>数据源/订阅者模式</strong></h2><p>关于这个模式，其实是生产者/消费者模式的变体，这种模式并不需要存储中介，而是通过一个<strong>DataSource空壳</strong>来包装数据，对于发布者提交了一个Task后，将立即返回一个DataSource，对于任务执行完后的结果，如果你想获取则必须通过datasource.subscribe(new XxxSubscriber(…))来订阅获取执行后的结果，而如果不通过数据源订阅的方式来获取而直接通过datasource.getData()获取则返回null，因为DataSource只是一个获取数据的空壳。这种模式在Fresco源码中有很好的体现，用了大量的这种模式。<br><img src="http://7xswxf.com2.z0.glb.qiniucdn.com/blog/consumer3.jpg" alt="这里写图片描述"></p>
<p>栗子：</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">  DataSource&lt;Apple&gt; dataSource = ProducerFactory.newAppleProducer().submit(name);</span><br><span class="line">  <span class="comment">//Apple apple = dataSource.getData();// apple is null!</span></span><br><span class="line">  dataSource.subscribe(<span class="keyword">new</span> BaseDataSubscriber&lt;Apple&gt;() &#123;</span><br><span class="line">      <span class="annotation">@Override</span></span><br><span class="line">      <span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(DataSource&lt;Apple&gt; dataSource)</span> </span>&#123;</span><br><span class="line">Apple apple = dataSource.getData();</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="annotation">@Override</span></span><br><span class="line">      <span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(DataSource&lt;Apple&gt; dataSource,Throwable throwable)</span> </span>&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
]]></content:encoded>
      
      <comments>http://zhengxiaoyong.me/2016/01/27/%E5%85%B3%E4%BA%8E%E7%94%9F%E4%BA%A7%E8%80%85-%E6%B6%88%E8%B4%B9%E8%80%85-%E8%AE%A2%E9%98%85%E8%80%85%E6%A8%A1%E5%BC%8F%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Android性能优化之Splash页应该这样设计</title>
      <link>http://zhengxiaoyong.me/2016/01/17/Android%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B9%8BSplash%E9%A1%B5%E5%BA%94%E8%AF%A5%E8%BF%99%E6%A0%B7%E8%AE%BE%E8%AE%A1/</link>
      <guid>http://zhengxiaoyong.me/2016/01/17/Android%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B9%8BSplash%E9%A1%B5%E5%BA%94%E8%AF%A5%E8%BF%99%E6%A0%B7%E8%AE%BE%E8%AE%A1/</guid>
      <pubDate>Sat, 16 Jan 2016 16:18:30 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;目前SplashActivity的设计&quot;&gt;&lt;a href=&quot;#目前SplashActivity的设计&quot; class=&quot;headerlink&quot; title=&quot;目前SplashActivity的设计&quot;&gt;&lt;/a&gt;&lt;strong&gt;目前SplashActivity的设计&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;目前市场上的应用在启动时基本上都会先启动一个SplashActivity，作为一个欢迎界面，为什么这样设计呢？&lt;br&gt;个人总结有三个优点：&lt;/p&gt;
&lt;h3 id=&quot;可以给用户更好的体验&quot;&gt;&lt;a href=&quot;#可以给用户更好的体验&quot; class=&quot;headerlink&quot; title=&quot;可以给用户更好的体验&quot;&gt;&lt;/a&gt;可以给用户更好的体验&lt;/h3&gt;&lt;p&gt;比如：可以由后台动态的改变欢迎的图片，或者显欢迎xxx回来，新浪微博的就是这种交互。&lt;/p&gt;
&lt;h3 id=&quot;可以缩减App的启动时间&quot;&gt;&lt;a href=&quot;#可以缩减App的启动时间&quot; class=&quot;headerlink&quot; title=&quot;可以缩减App的启动时间&quot;&gt;&lt;/a&gt;可以缩减App的启动时间&lt;/h3&gt;&lt;p&gt;由上一篇博文中知道app启动的耗时主要是在Application初始化中和MainActivity的界面绘制前，由于MainActivity的业务和布局复杂度肯定比只显示一张图片的界面高，所以，加入一个显示一张图片的Splash页可以优化应用的启动。&lt;/p&gt;
&lt;h3 id=&quot;可以在应用启动时做更多的事&quot;&gt;&lt;a href=&quot;#可以在应用启动时做更多的事&quot; class=&quot;headerlink&quot; title=&quot;可以在应用启动时做更多的事&quot;&gt;&lt;/a&gt;可以在应用启动时做更多的事&lt;/h3&gt;&lt;p&gt;一般来说SplashActivity一般会设计成停留2到4s不等，或者根据数据的加载程度来动态的设置Splash界面的停留时间，既然停留那么久，那么当然可以在这个界面背后做一些事以备MainActivity的快速显示，比如：数据的预加载、sp的初始化、网络请求等。&lt;/p&gt;
&lt;p&gt;当然你可能有些疑问，那这样初始化放在Application中也可以啊？也用异步操作数据也是一样啊？&lt;/p&gt;
&lt;p&gt;答案是不一样！正如上篇所说的，Application初始化时并不会加载界面，而是在它创建完和初始化完成后，开始创建Activity时才开始绘制Theme中的background和绘制布局，所以用一个轻量的Splash页给它设置一张背景欢迎图，这样就立马能显示界面了，而在这个界面中还可以做其它的初始化操作，这样在视觉上即达到了app的快速启动，又添加了体验和做数据的初始化。&lt;/p&gt;
&lt;p&gt;相反如果过多的放在Application中，则在点击app图标启动时会感觉延迟，必须要把Application中的东西都做完才进入Activity的配置和绘制中。&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="目前SplashActivity的设计"><a href="#目前SplashActivity的设计" class="headerlink" title="目前SplashActivity的设计"></a><strong>目前SplashActivity的设计</strong></h2><p>目前市场上的应用在启动时基本上都会先启动一个SplashActivity，作为一个欢迎界面，为什么这样设计呢？<br>个人总结有三个优点：</p>
<h3 id="可以给用户更好的体验"><a href="#可以给用户更好的体验" class="headerlink" title="可以给用户更好的体验"></a>可以给用户更好的体验</h3><p>比如：可以由后台动态的改变欢迎的图片，或者显欢迎xxx回来，新浪微博的就是这种交互。</p>
<h3 id="可以缩减App的启动时间"><a href="#可以缩减App的启动时间" class="headerlink" title="可以缩减App的启动时间"></a>可以缩减App的启动时间</h3><p>由上一篇博文中知道app启动的耗时主要是在Application初始化中和MainActivity的界面绘制前，由于MainActivity的业务和布局复杂度肯定比只显示一张图片的界面高，所以，加入一个显示一张图片的Splash页可以优化应用的启动。</p>
<h3 id="可以在应用启动时做更多的事"><a href="#可以在应用启动时做更多的事" class="headerlink" title="可以在应用启动时做更多的事"></a>可以在应用启动时做更多的事</h3><p>一般来说SplashActivity一般会设计成停留2到4s不等，或者根据数据的加载程度来动态的设置Splash界面的停留时间，既然停留那么久，那么当然可以在这个界面背后做一些事以备MainActivity的快速显示，比如：数据的预加载、sp的初始化、网络请求等。</p>
<p>当然你可能有些疑问，那这样初始化放在Application中也可以啊？也用异步操作数据也是一样啊？</p>
<p>答案是不一样！正如上篇所说的，Application初始化时并不会加载界面，而是在它创建完和初始化完成后，开始创建Activity时才开始绘制Theme中的background和绘制布局，所以用一个轻量的Splash页给它设置一张背景欢迎图，这样就立马能显示界面了，而在这个界面中还可以做其它的初始化操作，这样在视觉上即达到了app的快速启动，又添加了体验和做数据的初始化。</p>
<p>相反如果过多的放在Application中，则在点击app图标启动时会感觉延迟，必须要把Application中的东西都做完才进入Activity的配置和绘制中。<br><a id="more"></a></p>
<h2 id="目前大多数应用的Splash页设计的不足之处"><a href="#目前大多数应用的Splash页设计的不足之处" class="headerlink" title="目前大多数应用的Splash页设计的不足之处"></a><strong>目前大多数应用的Splash页设计的不足之处</strong></h2><p>目前大多应用的Splash页设计都是利用一个Activity，取名叫SplashActivity，然后在这个SplashActivity中加入一个背景图，然后再new Handler().postDelayed()几秒中，再startActivity跳入主界面，这样设计看起来非常不错，既可以在SplashActivity初始化、预加载数据，还可以提高应用的启动速度。</p>
<p>不过这确实提高了应用的启动速度，毕竟我们比较快的看到了第一帧——SplashActivity，不过在SplashActivity之后，还需要调到MainActivity啊，虽然MainActivity中的一些数据可以在SplashActivity做预取，不过这中间需要有Intent的传递过程，而且MainActivity中布局还没加载进来，所以还是需要再加载和绘制布局界面，然后才能填入数据，所以这样看来，在跳转到MainActivity中，还是需要做界面的绘制和数据的加载（包括Intent的数据传递）。</p>
<h3 id="以往的SplashActivity的设计图"><a href="#以往的SplashActivity的设计图" class="headerlink" title="以往的SplashActivity的设计图"></a><strong>以往的SplashActivity的设计图</strong></h3><p>这样看来上面这个设计流程可以这样表示：<br><img src="http://7xswxf.com2.z0.glb.qiniucdn.com/blog/splash1.png" alt="这里写图片描述"></p>
<h2 id="性能优且体验棒的Splash页的设计"><a href="#性能优且体验棒的Splash页的设计" class="headerlink" title="性能优且体验棒的Splash页的设计"></a><strong>性能优且体验棒的Splash页的设计</strong></h2><p>从上面这个设计图来看，其中有些操作能不能去除呢？既能达到app启动速度的提高，也能对数据的预加载还能减去Splash和MainActivity之间不必要的数据传递和View的分开绘制。</p>
<p>答案是能的，既然SplashActivity和MainActivity分开进行操作还是不完美，那么可以考虑把它们合为一起，即：一开始还是显示MainActivity，SplashActivity变为SplashFragment，然后放一个FrameLayout作为根布局去显示SplashFragment界面，这样在SplashFragment显示时候利用显示的2~4s间的空隙时间做网络请求去加载数据，这样待SplashFragment显示完后再remove，这样将看到的是有内容的MainActivity，就不必再去等待网络请求去返回数据了。<br>当然，这种方式是把load Splash View和ContentView合二为一了一起加载，这可能会影响应用的启动时间，这时我们可以用ViewStub延迟加载MainActivity中某些View从而减去这个影响。</p>
<p>如下设计：<br><img src="http://7xswxf.com2.z0.glb.qiniucdn.com/blog/splash2.png" alt="这里写图片描述"></p>
<h2 id="优化前后效果对比"><a href="#优化前后效果对比" class="headerlink" title="优化前后效果对比"></a><strong>优化前后效果对比</strong></h2><p>这里为了测试，我把Splash页的delay时间都设为2.5s。<br>优化前：<br><img src="http://7xswxf.com2.z0.glb.qiniucdn.com/blog/splash3.gif" alt="这里写图片描述"><br>优化后：<br><img src="http://7xswxf.com2.z0.glb.qiniucdn.com/blog/splash4.gif" alt="这里写图片描述"><br>优化后其实是把SplashActivity用Fragment显示，显示完后再remove，这样在显示的时候，MainActivity中还可以直接加载网络数据，这样在显示完SplashFragment后则直接显示主页了，而省去了ProgressBar进度条的网络加载过程。<br>代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Handler mHandler = <span class="keyword">new</span> Handler();</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">   <span class="keyword">final</span> SplashFragment splashFragment = <span class="keyword">new</span> SplashFragment();</span><br><span class="line">   <span class="keyword">final</span> FragmentTransaction transaction = getFragmentManager().beginTransaction();</span><br><span class="line">   transaction.replace(R.id.frame, splashFragment);</span><br><span class="line">   transaction.commit();	</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">mHandler.postDelayed(<span class="keyword">new</span> DelayRunnable(<span class="keyword">this</span>, splashFragment, mProgressBar), <span class="number">2500</span>);</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">   <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DelayRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">       <span class="keyword">private</span> WeakReference&lt;Context&gt; contextRef;</span><br><span class="line">       <span class="keyword">private</span> WeakReference&lt;SplashFragment&gt; fragmentRef;</span><br><span class="line">       <span class="keyword">private</span> WeakReference&lt;ProgressBar&gt; progressBarRef;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="title">DelayRunnable</span><span class="params">(Context context, SplashFragment splashFragment, ProgressBar progressBar)</span> </span>&#123;</span><br><span class="line">           contextRef = <span class="keyword">new</span> WeakReference&lt;Context&gt;(context);</span><br><span class="line">           fragmentRef = <span class="keyword">new</span> WeakReference&lt;SplashFragment&gt;(splashFragment);</span><br><span class="line">           progressBarRef = <span class="keyword">new</span> WeakReference&lt;ProgressBar&gt;(progressBar);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="annotation">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           ProgressBar progressBar = progressBarRef.get();</span><br><span class="line">           <span class="keyword">if</span> (progressBar != <span class="keyword">null</span>)</span><br><span class="line">               progressBar.setVisibility(View.GONE);</span><br><span class="line">           Activity context = (Activity) contextRef.get();</span><br><span class="line">           <span class="keyword">if</span> (context != <span class="keyword">null</span>) &#123;</span><br><span class="line">               SplashFragment splashFragment = fragmentRef.get();</span><br><span class="line">               <span class="keyword">if</span> (splashFragment == <span class="keyword">null</span>)</span><br><span class="line">                   <span class="keyword">return</span>;</span><br><span class="line">               <span class="keyword">final</span> FragmentTransaction transaction = context.getFragmentManager().beginTransaction();</span><br><span class="line">               transaction.remove(splashFragment);</span><br><span class="line">               transaction.commit();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="annotation">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">super</span>.onDestroy();</span><br><span class="line">       mHandler.removeCallbacksAndMessages(<span class="keyword">null</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>其中FrameLayout作为MainActivity的根布局用作SplashFragment的全屏显示。<br>为了更优则可以考虑ViewStub，在SplashFragment显示时再进行加载额外的View。</p>
<p>关于耦合性，其实很低，Splash页面有专门一个SplashFragment去配置，而MainActivity只是控制它的加载与remove。</p>
]]></content:encoded>
      
      <comments>http://zhengxiaoyong.me/2016/01/17/Android%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B9%8BSplash%E9%A1%B5%E5%BA%94%E8%AF%A5%E8%BF%99%E6%A0%B7%E8%AE%BE%E8%AE%A1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Android性能优化之加快应用启动速度</title>
      <link>http://zhengxiaoyong.me/2016/01/14/Android%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B9%8B%E5%8A%A0%E5%BF%AB%E5%BA%94%E7%94%A8%E5%90%AF%E5%8A%A8%E9%80%9F%E5%BA%A6/</link>
      <guid>http://zhengxiaoyong.me/2016/01/14/Android%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B9%8B%E5%8A%A0%E5%BF%AB%E5%BA%94%E7%94%A8%E5%90%AF%E5%8A%A8%E9%80%9F%E5%BA%A6/</guid>
      <pubDate>Thu, 14 Jan 2016 14:51:30 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;应用的启动&quot;&gt;&lt;a href=&quot;#应用的启动&quot; class=&quot;headerlink&quot; title=&quot;应用的启动&quot;&gt;&lt;/a&gt;&lt;strong&gt;应用的启动&lt;/strong&gt;&lt;/h2&gt;&lt;h3 id=&quot;启动方式&quot;&gt;&lt;a href=&quot;#启动方式&quot; class=&quot;headerlink&quot; title=&quot;启动方式&quot;&gt;&lt;/a&gt;&lt;strong&gt;启动方式&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;通常来说，在安卓中应用的启动方式分为两种：冷启动和热启动&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1、冷启动：当启动应用时，后台没有该应用的进程，这时系统会重新创建一个新的进程分配给该应用，这个启动方式就是冷启动。&lt;/p&gt;
&lt;p&gt;2、热启动：当启动应用时，后台已有该应用的进程（例：按back键、home键，应用虽然会退出，但是该应用的进程是依然会保留在后台，可进入任务列表查看），所以在已有进程的情况下，这种启动会从已有的进程中来启动应用，这个方式叫热启动。&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="应用的启动"><a href="#应用的启动" class="headerlink" title="应用的启动"></a><strong>应用的启动</strong></h2><h3 id="启动方式"><a href="#启动方式" class="headerlink" title="启动方式"></a><strong>启动方式</strong></h3><p>通常来说，在安卓中应用的启动方式分为两种：冷启动和热启动</p>
<blockquote>
<p>1、冷启动：当启动应用时，后台没有该应用的进程，这时系统会重新创建一个新的进程分配给该应用，这个启动方式就是冷启动。</p>
<p>2、热启动：当启动应用时，后台已有该应用的进程（例：按back键、home键，应用虽然会退出，但是该应用的进程是依然会保留在后台，可进入任务列表查看），所以在已有进程的情况下，这种启动会从已有的进程中来启动应用，这个方式叫热启动。</p>
</blockquote>
<a id="more"></a>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a><strong>特点</strong></h3><p>1、冷启动：冷启动因为系统会重新创建一个新的进程分配给它，所以会先创建和初始化Application类，再创建和初始化MainActivity类（包括一系列的测量、布局、绘制），最后显示在界面上。</p>
<p>2、热启动：热启动因为会从已有的进程中来启动，所以热启动就不会走Application这步了，而是直接走MainActivity（包括一系列的测量、布局、绘制），所以热启动的过程只需要创建和初始化一个MainActivity就行了，而不必创建和初始化Application，因为一个应用从新进程的创建到进程的销毁，Application只会初始化一次。</p>
<p><strong>上面说的启动是点击app的启动图标来启动的，而另外一种方式是进入最近使用的列表界面来启动应用，这种不应该叫启动，应该叫恢复。</strong></p>
<h2 id="应用启动的流程"><a href="#应用启动的流程" class="headerlink" title="应用启动的流程"></a><strong>应用启动的流程</strong></h2><p>在安卓系统上，应用在没有进程的情况下，应用的启动都是这样一个流程：当点击app的启动图标时，安卓系统会从Zygote进程中fork创建出一个新的进程分配给该应用，之后会依次创建和初始化Application类、创建MainActivity类、加载主题样式Theme中的windowBackground等属性设置给MainActivity以及配置Activity层级上的一些属性、再inflate布局、当onCreate/onStart/onResume方法都走完了后最后才进行contentView的measure/layout/draw显示在界面上，所以直到这里，应用的第一次启动才算完成，这时候我们看到的界面也就是所说的第一帧。</p>
<p>所以，总结一下，应用的启动流程如下：</p>
<blockquote>
<p>Application的构造器方法——&gt;attachBaseContext()——&gt;onCreate()——&gt;Activity的构造方法——&gt;onCreate()——&gt;配置主题中背景等属性——&gt;onStart()——&gt;onResume()——&gt;测量布局绘制显示在界面上。</p>
</blockquote>
<h2 id="测量应用启动的时间"><a href="#测量应用启动的时间" class="headerlink" title="测量应用启动的时间"></a><strong>测量应用启动的时间</strong></h2><p>在上面这个启动流程中，任何一个地方有耗时操作都会拖慢我们应用的启动速度，而应用启动时间是用毫秒度量的，对于毫秒级别的快慢度量我们还是需要去精确的测量到到底应用启动花了多少时间，而根据这个时间来做衡量。</p>
<h3 id="什么才是应用的启动时间"><a href="#什么才是应用的启动时间" class="headerlink" title="什么才是应用的启动时间"></a><strong>什么才是应用的启动时间</strong></h3><p>从点击应用的启动图标开始创建出一个新的进程直到我们看到了界面的第一帧，这段时间就是应用的启动时间。</p>
<p>我们要测量的也就是这段时间，测量这段时间可以通过adb shell命令的方式进行测量，这种方法测量的最为精确，命令为：</p>
<figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell am start -W <span class="string">[packageName]</span>/<span class="string">[packageName.MainActivity]</span></span><br></pre></td></tr></table></figure>
<p>执行成功后将返回三个测量到的时间：<br>1、ThisTime:一般和TotalTime时间一样，除非在应用启动时开了一个透明的Activity预先处理一些事再显示出主Activity，这样将比TotalTime小。<br>2、TotalTime:应用的启动时间，包括创建进程+Application初始化+Activity初始化到界面显示。<br>3、WaitTime:一般比TotalTime大点，包括系统影响的耗时。</p>
<p>下面是测量一个应用冷启动和热启动的时间：<br>冷启动：<br><img src="http://7xswxf.com2.z0.glb.clouddn.com/blog/speed1.png" alt="这里写图片描述"><br>热启动：<br><img src="http://7xswxf.com2.z0.glb.clouddn.com/blog/speed2.png" alt="这里写图片描述"></p>
<p>可以看到在进程已经存在的情况下，只需要重新初始化MainActivity，这样的启动比较快，不过大多数情况下应用的启动都是冷启动，因为用户都会在任务列表中手动关闭遗留的应用进程。</p>
<h2 id="减少应用启动时的耗时"><a href="#减少应用启动时的耗时" class="headerlink" title="减少应用启动时的耗时"></a><strong>减少应用启动时的耗时</strong></h2><p>针对冷启动时候的一些耗时，如上测得这个应用算是中型的app，在冷启动的时候耗时已经快700ms了，如果项目再大点在Application中配置了更多的初始化操作，这样将可能达到1s，这样每次启动都明显感觉延迟，所以在进行应用初始化的时候采取以下策略：<br>1、在Application的构造器方法、attachBaseContext()、onCreate()方法中不要进行耗时操作的初始化，一些数据预取放在异步线程中，可以采取Callable实现。<br>2、对于MainActivity，由于在获取到第一帧前，需要对contentView进行测量布局绘制操作，尽量减少布局的层次，考虑StubView的延迟加载策略，当然在onCreate、onStart、onResume方法中避免做耗时操作。</p>
<h2 id="优化应用启动时的体验"><a href="#优化应用启动时的体验" class="headerlink" title="优化应用启动时的体验"></a><strong>优化应用启动时的体验</strong></h2><p>对于应用的启动时间，只能是尽量的避免一些耗时的、非必要的操作在主线程中，这样相对可以缩减一部分启动的耗时，另外一方面在等待第一帧显示的时间里，可以加入一些配置以增加体验，比如加入Activity的background，这个背景会在显示第一帧前提前显示在界面上。<br>1、先为主界面单独写一个主题style，设置一张待显示的图片，这里我设置了一个颜色，然后在manifest中设置给MainActivity：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">style</span> <span class="attribute">name</span>=<span class="value">"AppTheme.Launcher"</span>&gt;</span><span class="css"></span><br><span class="line">    &lt;<span class="tag">item</span> <span class="tag">name</span>="<span class="tag">android</span><span class="pseudo">:windowBackground"</span>&gt;<span class="at_rule">@<span class="keyword">drawable/bule&lt;/item&gt;</span></span><br><span class="line"></span></span><span class="tag">&lt;/<span class="title">style</span>&gt;</span></span><br><span class="line">//...</span><br><span class="line">        <span class="tag">&lt;<span class="title">activity</span></span><br><span class="line">            <span class="attribute">android:name</span>=<span class="value">".MainActivity"</span></span><br><span class="line">            <span class="attribute">android:label</span>=<span class="value">"@string/app_name"</span></span><br><span class="line">            <span class="attribute">android:theme</span>=<span class="value">"@style/AppTheme.Launcher"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">action</span> <span class="attribute">android:name</span>=<span class="value">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">category</span> <span class="attribute">android:name</span>=<span class="value">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="title">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">activity</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>2、然后在MainActivity中加载布局前把AppTheme重新设置给MainActivity：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="at_rule">@<span class="keyword">Override</span></span><br><span class="line">    protected void <span class="function">onCreate</span>(Bundle savedInstanceState) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="tag">setTheme</span>(<span class="tag">R</span><span class="class">.style</span><span class="class">.AppTheme</span>);</span><br><span class="line">        <span class="tag">super</span><span class="class">.onCreate</span>(<span class="tag">savedInstanceState</span>);</span><br><span class="line">        <span class="tag">setContentView</span>(<span class="tag">R</span><span class="class">.layout</span><span class="class">.activity_main</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样在启动时会先显示background，然后待界面绘制完成再显示主界面<br><img src="http://7xswxf.com2.z0.glb.clouddn.com/blog/speed3.gif" alt="这里写图片描述"></p>
]]></content:encoded>
      
      <comments>http://zhengxiaoyong.me/2016/01/14/Android%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B9%8B%E5%8A%A0%E5%BF%AB%E5%BA%94%E7%94%A8%E5%90%AF%E5%8A%A8%E9%80%9F%E5%BA%A6/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
